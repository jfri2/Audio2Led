
Audio2Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000324  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c44  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000937  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a7  00000000  00000000  000019c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000475  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ba  00000000  00000000  00002629  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000027e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_1>
   8:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  88:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
*/
void adc_init(void)
{

    // setup the Analog to Digital Converter
    ADMUX = 0x40;		        // start by selecting the voltage reference - Avcc
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	80 83       	st	Z, r24
    ADMUX = ADMUX | 0x00;       // Select the ADC channel - channel 0
  98:	80 81       	ld	r24, Z
  9a:	80 83       	st	Z, r24
    ADMUX = ADMUX | 0x20;	    // set for Left Justified - Only using 8 bit of resolution
  9c:	80 81       	ld	r24, Z
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	80 83       	st	Z, r24
    ADMUX |= (1 << REFS0);	    //Sets reference to AVcc                                 
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24
    ADCSRA = 0x04;	            // select the ADC clock frequency - Clock / 128
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	80 83       	st	Z, r24
    ADCSRA = ADCSRA | 0x80;	    // enable the ADC
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
        
    // Do one ADC conversion to clear registers
    ADCSRA |= (1<<ADSC);
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
    while (ADCSRA & (1<<ADSC));   
  bc:	80 81       	ld	r24, Z
  be:	86 fd       	sbrc	r24, 6
  c0:	fd cf       	rjmp	.-6      	; 0xbc <adc_init+0x2c>
    DDRD |= (1<<PORTD7); 
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	08 95       	ret

000000c6 <adc_get>:
* @brief @todo
* @return void
*/
uint8_t adc_get(void)
{    
PORTD |= (1<<PORTD7);       // DEBUG
  c6:	5f 9a       	sbi	0x0b, 7	; 11
    ADCSRA |= (1<<ADSC);            // Start conversion
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
    while (ADCSRA & (1<<ADSC));     // Wait for conversion to complete   
  d2:	80 81       	ld	r24, Z
  d4:	86 fd       	sbrc	r24, 6
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <adc_get+0xc>
PORTD &= ~(1<<PORTD7);      // DEBUG
  d8:	5f 98       	cbi	0x0b, 7	; 11
    return (ADCH);
  da:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  de:	08 95       	ret

000000e0 <msgeq7_get_audio>:
* @brief Get seven audio band levels from MSGEQ7
* @param[in] *audio     Pointer to location to store data read from MSGEQ7
* @return void
*/
void msgeq7_get_audio(uint8_t *audio)
{
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
    // Reset MSGEQ7
    MSGEQ7_STROBE_LOW();
  e8:	5d 98       	cbi	0x0b, 5	; 11
    MSGEQ7_RESET_LOW();
  ea:	5e 98       	cbi	0x0b, 6	; 11
    MSGEQ7_RESET_HIGH();
  ec:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	ef e8       	ldi	r30, 0x8F	; 143
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <msgeq7_get_audio+0x12>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <msgeq7_get_audio+0x18>
  f8:	00 00       	nop
    _delay_us(100);
    MSGEQ7_STROBE_HIGH();   
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	e7 ec       	ldi	r30, 0xC7	; 199
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <msgeq7_get_audio+0x20>
 104:	00 c0       	rjmp	.+0      	; 0x106 <msgeq7_get_audio+0x26>
 106:	00 00       	nop
    _delay_us(50);
    MSGEQ7_STROBE_LOW();
 108:	5d 98       	cbi	0x0b, 5	; 11
 10a:	e7 ec       	ldi	r30, 0xC7	; 199
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <msgeq7_get_audio+0x2e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <msgeq7_get_audio+0x34>
 114:	00 00       	nop
    _delay_us(50);
    MSGEQ7_RESET_LOW();
 116:	5e 98       	cbi	0x0b, 6	; 11
    MSGEQ7_STROBE_HIGH();
 118:	5d 9a       	sbi	0x0b, 5	; 11
 11a:	e7 ec       	ldi	r30, 0xC7	; 199
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <msgeq7_get_audio+0x3e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <msgeq7_get_audio+0x44>
 124:	00 00       	nop
 126:	ec 01       	movw	r28, r24
 128:	8c 01       	movw	r16, r24
 12a:	09 5f       	subi	r16, 0xF9	; 249
 12c:	1f 4f       	sbci	r17, 0xFF	; 255
    _delay_us(50);

    // Strobe MSGEQ7 and read each band (4 samples per band)
    for (uint8_t i=0; i<MSGEQ7_AUD_BANDS; i++)
    {
        MSGEQ7_STROBE_LOW();
 12e:	5d 98       	cbi	0x0b, 5	; 11
 130:	f0 ea       	ldi	r31, 0xA0	; 160
 132:	fa 95       	dec	r31
 134:	f1 f7       	brne	.-4      	; 0x132 <msgeq7_get_audio+0x52>
        _delay_us(30);  // Strobe low pulse width (40 us of 80 us (+ ADC read time) strobe period) 
        audio[i] = adc_get();  // TBD, must take less than 40 us. Must do 4 or fewer conversions
 136:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_get>
 13a:	89 93       	st	Y+, r24
 13c:	8a e1       	ldi	r24, 0x1A	; 26
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <msgeq7_get_audio+0x5e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <msgeq7_get_audio+0x64>
        _delay_us(5);
        MSGEQ7_STROBE_HIGH();
 144:	5d 9a       	sbi	0x0b, 5	; 11
 146:	e7 ec       	ldi	r30, 0xC7	; 199
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <msgeq7_get_audio+0x6a>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <msgeq7_get_audio+0x70>
 150:	00 00       	nop
    MSGEQ7_RESET_LOW();
    MSGEQ7_STROBE_HIGH();
    _delay_us(50);

    // Strobe MSGEQ7 and read each band (4 samples per band)
    for (uint8_t i=0; i<MSGEQ7_AUD_BANDS; i++)
 152:	c0 17       	cp	r28, r16
 154:	d1 07       	cpc	r29, r17
 156:	59 f7       	brne	.-42     	; 0x12e <msgeq7_get_audio+0x4e>
        audio[i] = adc_get();  // TBD, must take less than 40 us. Must do 4 or fewer conversions
        _delay_us(5);
        MSGEQ7_STROBE_HIGH();
        _delay_us(50);  // @todo: subtract adc_get_avg time from this. It should be ok to leave in but if timing is an issue take it out
    }  
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	08 95       	ret

00000162 <msgeq7_init>:

void msgeq7_init(void)
{
    GPIO_DDR  |=  ((1<<MSGEQ7_STR) | (1<<MSGEQ7_RST));  // Set rst and strobe to output
 162:	8a b1       	in	r24, 0x0a	; 10
 164:	80 66       	ori	r24, 0x60	; 96
 166:	8a b9       	out	0x0a, r24	; 10
 168:	08 95       	ret

0000016a <timer_init>:
/*!
* @brief @todo
*/
void timer_init(void)
{
    DDRB = 0X3F;
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	84 b9       	out	0x04, r24	; 4
    
    //Sets timer 1 clear on compare match (output to low level) for output compares a and b
    TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1 << WGM10);
 16e:	e0 e8       	ldi	r30, 0x80	; 128
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	81 6a       	ori	r24, 0xA1	; 161
 176:	80 83       	st	Z, r24
    //Set prescalar to clk/256 (
    TCCR1B |= (1 << CS12);
 178:	e1 e8       	ldi	r30, 0x81	; 129
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	80 83       	st	Z, r24
    //Enables interrupts for OCR1A and OCR1B
    TIMSK1 |= (1 << OCIE1B)|(1 << OCIE1A);
 182:	ef e6       	ldi	r30, 0x6F	; 111
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	86 60       	ori	r24, 0x06	; 6
 18a:	80 83       	st	Z, r24
    
    TCCR2A |= (1 << COM2A1)|(1 << COM2B1)|(1 << WGM20);
 18c:	e0 eb       	ldi	r30, 0xB0	; 176
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	81 6a       	ori	r24, 0xA1	; 161
 194:	80 83       	st	Z, r24
    TCCR2B |= (1 << CS22)|(1 << CS21);
 196:	e1 eb       	ldi	r30, 0xB1	; 177
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	86 60       	ori	r24, 0x06	; 6
 19e:	80 83       	st	Z, r24
    //Enables interrupts for OCR2B
    TIMSK2 |= (1 << OCIE2A);
 1a0:	e0 e7       	ldi	r30, 0x70	; 112
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <timer_update>:
}

void timer_update(uint8_t red, uint8_t blue, uint8_t green)
{
    RED_CMP = red;
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1b2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    BLU_CMP = blue;
 1b6:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    GRN_CMP = green;
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1c0:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1c4:	08 95       	ret

000001c6 <__vector_1>:
uint8_t bass = 0;
uint8_t mid = 0;
uint8_t treb = 0;

ISR(INT0_vect)
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
    // @todo
}
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_2>:

ISR(INT1_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
    // @todo
}
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <system_init>:
* @brief @todo
* @return void
*/
void system_init(void)
{
    msgeq7_init(); 
 1ee:	0e 94 b1 00 	call	0x162	; 0x162 <msgeq7_init>
    adc_init();
 1f2:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
    timer_init(); 
 1f6:	0e 94 b5 00 	call	0x16a	; 0x16a <timer_init>
 1fa:	08 95       	ret

000001fc <main>:
    // @todo
}

int main(void)
{
    system_init();
 1fc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <system_init>
        // Get audio levels
        msgeq7_get_audio(audio_level);
        
        // Assign to bass/mid/treb
        bass = (((audio_level[0] + audio_level[1]) / 2));
        mid  = (((audio_level[2] + audio_level[3] + audio_level[4]) / 3));
 200:	c3 e0       	ldi	r28, 0x03	; 3
 202:	d0 e0       	ldi	r29, 0x00	; 0
    //sei();										//Enables global interrupts
        
    while (1) 
    {
        // Get audio levels
        msgeq7_get_audio(audio_level);
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 70 00 	call	0xe0	; 0xe0 <msgeq7_get_audio>
        
        // Assign to bass/mid/treb
        bass = (((audio_level[0] + audio_level[1]) / 2));
 20c:	e3 e0       	ldi	r30, 0x03	; 3
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	80 81       	ld	r24, Z
 212:	21 81       	ldd	r18, Z+1	; 0x01
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	28 0f       	add	r18, r24
 218:	31 1d       	adc	r19, r1
 21a:	35 95       	asr	r19
 21c:	27 95       	ror	r18
 21e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <bass>
        mid  = (((audio_level[2] + audio_level[3] + audio_level[4]) / 3));
 222:	32 81       	ldd	r19, Z+2	; 0x02
 224:	83 81       	ldd	r24, Z+3	; 0x03
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	83 0f       	add	r24, r19
 22a:	91 1d       	adc	r25, r1
 22c:	34 81       	ldd	r19, Z+4	; 0x04
 22e:	83 0f       	add	r24, r19
 230:	91 1d       	adc	r25, r1
 232:	be 01       	movw	r22, r28
 234:	0e 94 2e 01 	call	0x25c	; 0x25c <__divmodhi4>
 238:	46 2f       	mov	r20, r22
 23a:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <mid>
        treb = (((audio_level[5] + audio_level[6]) / 3));       
 23e:	35 81       	ldd	r19, Z+5	; 0x05
 240:	86 81       	ldd	r24, Z+6	; 0x06
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	83 0f       	add	r24, r19
 246:	91 1d       	adc	r25, r1
 248:	be 01       	movw	r22, r28
 24a:	0e 94 2e 01 	call	0x25c	; 0x25c <__divmodhi4>
 24e:	86 2f       	mov	r24, r22
 250:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
        
        // Assign to timer outputs
        timer_update(treb, bass, mid);
 254:	62 2f       	mov	r22, r18
 256:	0e 94 d6 00 	call	0x1ac	; 0x1ac <timer_update>
    }
 25a:	d4 cf       	rjmp	.-88     	; 0x204 <main+0x8>

0000025c <__divmodhi4>:
 25c:	97 fb       	bst	r25, 7
 25e:	07 2e       	mov	r0, r23
 260:	16 f4       	brtc	.+4      	; 0x266 <__divmodhi4+0xa>
 262:	00 94       	com	r0
 264:	07 d0       	rcall	.+14     	; 0x274 <__divmodhi4_neg1>
 266:	77 fd       	sbrc	r23, 7
 268:	09 d0       	rcall	.+18     	; 0x27c <__divmodhi4_neg2>
 26a:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodhi4>
 26e:	07 fc       	sbrc	r0, 7
 270:	05 d0       	rcall	.+10     	; 0x27c <__divmodhi4_neg2>
 272:	3e f4       	brtc	.+14     	; 0x282 <__divmodhi4_exit>

00000274 <__divmodhi4_neg1>:
 274:	90 95       	com	r25
 276:	81 95       	neg	r24
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	08 95       	ret

0000027c <__divmodhi4_neg2>:
 27c:	70 95       	com	r23
 27e:	61 95       	neg	r22
 280:	7f 4f       	sbci	r23, 0xFF	; 255

00000282 <__divmodhi4_exit>:
 282:	08 95       	ret

00000284 <__udivmodhi4>:
 284:	aa 1b       	sub	r26, r26
 286:	bb 1b       	sub	r27, r27
 288:	51 e1       	ldi	r21, 0x11	; 17
 28a:	07 c0       	rjmp	.+14     	; 0x29a <__udivmodhi4_ep>

0000028c <__udivmodhi4_loop>:
 28c:	aa 1f       	adc	r26, r26
 28e:	bb 1f       	adc	r27, r27
 290:	a6 17       	cp	r26, r22
 292:	b7 07       	cpc	r27, r23
 294:	10 f0       	brcs	.+4      	; 0x29a <__udivmodhi4_ep>
 296:	a6 1b       	sub	r26, r22
 298:	b7 0b       	sbc	r27, r23

0000029a <__udivmodhi4_ep>:
 29a:	88 1f       	adc	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	5a 95       	dec	r21
 2a0:	a9 f7       	brne	.-22     	; 0x28c <__udivmodhi4_loop>
 2a2:	80 95       	com	r24
 2a4:	90 95       	com	r25
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
