
Audio2Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000318  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd9  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093c  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067d  00000000  00000000  0000194d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000475  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d9  00000000  00000000  00002575  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000274e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_1>
   8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  88:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
* @return void
*/
void adc_init(void)
{
    // Set entire ADC DDR to inputs with pullups on
    ADC_DDR  = 0x00;
  90:	17 b8       	out	0x07, r1	; 7
    ADC_PORT = 0x3F;
  92:	8f e3       	ldi	r24, 0x3F	; 63
  94:	88 b9       	out	0x08, r24	; 8
    
    // Set ADC for external AVcc reference, ADC channel 0, Left justified (8 bit)
    ADMUX |= (1<<REFS0)|(1<<ADLAR);
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 66       	ori	r24, 0x60	; 96
  9e:	80 83       	st	Z, r24
    
    // Disable digital input on ADC channel 0
    DIDR0 |= (1<<ADC0D);
  a0:	ee e7       	ldi	r30, 0x7E	; 126
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	80 83       	st	Z, r24
    
    // Enable ADC, prescale clock to divide by 2 (13 cycles / 8 MHz clk = 1.625 usec sample period). 
    ADCSRA |= (1<<ADEN) ;
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
    
    // Do one ADC conversion to clear registers
    ADCSRA |= (1<<ADSC);
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
    while (ADCSRA & (1<<ADSC));    
  ba:	80 81       	ld	r24, Z
  bc:	86 fd       	sbrc	r24, 6
  be:	fd cf       	rjmp	.-6      	; 0xba <adc_init+0x2a>
}
  c0:	08 95       	ret

000000c2 <adc_get>:
* @brief @todo
* @return void
*/
uint16_t adc_get(void)
{
    ADCSRA |= (1<<ADSC);            // Start conversion
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
    while (ADCSRA & (1<<ADSC));     // Wait for conversion to complete   
  cc:	80 81       	ld	r24, Z
  ce:	86 fd       	sbrc	r24, 6
  d0:	fd cf       	rjmp	.-6      	; 0xcc <adc_get+0xa>
    return (ADCH);                  // Return upper byte of ADC register (left justified)
  d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	08 95       	ret

000000da <msgeq7_get_audio>:
* @brief Get seven audio band levels from MSGEQ7
* @param[in] *audio     Pointer to location to store data read from MSGEQ7
* @return void
*/
void msgeq7_get_audio(uint8_t *audio)
{
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
    // Reset MSGEQ7
    MSGEQ7_STROBE_HIGH();
  e2:	5d 9a       	sbi	0x0b, 5	; 11
    MSGEQ7_RESET_HIGH();
  e4:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	ef e3       	ldi	r30, 0x3F	; 63
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <msgeq7_get_audio+0x10>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <msgeq7_get_audio+0x16>
  f0:	00 00       	nop
    _delay_us(80);          // 80 us delay (72 minimum in datasheet)
    MSGEQ7_STROBE_LOW();   
  f2:	2b b1       	in	r18, 0x0b	; 11
  f4:	2f 6d       	ori	r18, 0xDF	; 223
  f6:	2b b9       	out	0x0b, r18	; 11
  f8:	f0 ea       	ldi	r31, 0xA0	; 160
  fa:	fa 95       	dec	r31
  fc:	f1 f7       	brne	.-4      	; 0xfa <msgeq7_get_audio+0x20>
    _delay_us(30);          // 30 us delay (total of 110 us, minimum 100 us in datasheet)
    MSGEQ7_RESET_LOW();     
  fe:	2b b1       	in	r18, 0x0b	; 11
 100:	2f 6b       	ori	r18, 0xBF	; 191
 102:	2b b9       	out	0x0b, r18	; 11
    MSGEQ7_STROBE_HIGH();
 104:	5d 9a       	sbi	0x0b, 5	; 11
 106:	25 ed       	ldi	r18, 0xD5	; 213
 108:	2a 95       	dec	r18
 10a:	f1 f7       	brne	.-4      	; 0x108 <msgeq7_get_audio+0x2e>
 10c:	00 00       	nop
 10e:	ec 01       	movw	r28, r24
 110:	8c 01       	movw	r16, r24
 112:	09 5f       	subi	r16, 0xF9	; 249
 114:	1f 4f       	sbci	r17, 0xFF	; 255
    _delay_us(40);          // This puts us at to (minimum 36 us delay from rst going low)

    // Strobe MSGEQ7 and read each band (4 samples per band)
    for (uint8_t i=0; i<MSGEQ7_AUD_BANDS; i++)
    {
        MSGEQ7_STROBE_LOW();
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	9f 6d       	ori	r25, 0xDF	; 223
 11a:	9b b9       	out	0x0b, r25	; 11
 11c:	85 ed       	ldi	r24, 0xD5	; 213
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <msgeq7_get_audio+0x44>
 122:	00 00       	nop
        _delay_us(40);  // Strobe low pulse width (40 us of 80 us (+ ADC read time) strobe period) 
        audio[i] = adc_get();  // TBD, must take less than 40 us. Must do 4 or fewer conversions. @todo, make this average 4
 124:	0e 94 61 00 	call	0xc2	; 0xc2 <adc_get>
 128:	89 93       	st	Y+, r24
        MSGEQ7_STROBE_HIGH();
 12a:	5d 9a       	sbi	0x0b, 5	; 11
 12c:	e5 ed       	ldi	r30, 0xD5	; 213
 12e:	ea 95       	dec	r30
 130:	f1 f7       	brne	.-4      	; 0x12e <msgeq7_get_audio+0x54>
 132:	00 00       	nop
    MSGEQ7_RESET_LOW();     
    MSGEQ7_STROBE_HIGH();
    _delay_us(40);          // This puts us at to (minimum 36 us delay from rst going low)

    // Strobe MSGEQ7 and read each band (4 samples per band)
    for (uint8_t i=0; i<MSGEQ7_AUD_BANDS; i++)
 134:	c0 17       	cp	r28, r16
 136:	d1 07       	cpc	r29, r17
 138:	71 f7       	brne	.-36     	; 0x116 <msgeq7_get_audio+0x3c>
        _delay_us(40);  // Strobe low pulse width (40 us of 80 us (+ ADC read time) strobe period) 
        audio[i] = adc_get();  // TBD, must take less than 40 us. Must do 4 or fewer conversions. @todo, make this average 4
        MSGEQ7_STROBE_HIGH();
        _delay_us(40);  // @todo: subtract adc_get_avg time from this. It should be ok to leave in but if timing is an issue take it out
    }  
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	0f 91       	pop	r16
 142:	08 95       	ret

00000144 <msgeq7_init>:

void msgeq7_init(void)
{
    GPIO_DDR  |=  ((1<<MSGEQ7_STR) | (1<<MSGEQ7_RST));  // Set rst and strobe to output
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	80 66       	ori	r24, 0x60	; 96
 148:	8a b9       	out	0x0a, r24	; 10
 14a:	08 95       	ret

0000014c <timer_init>:
/*!
* @brief @todo
*/
void timer_init(void)
{
    DDRB = 0X3F;
 14c:	8f e3       	ldi	r24, 0x3F	; 63
 14e:	84 b9       	out	0x04, r24	; 4
    
    //Sets timer 1 clear on compare match (output to low level) for output compares a and b
    TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1 << WGM10);
 150:	e0 e8       	ldi	r30, 0x80	; 128
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	81 6a       	ori	r24, 0xA1	; 161
 158:	80 83       	st	Z, r24
    //Set prescalar to clk/256 (
    TCCR1B |= (1 << CS12);
 15a:	e1 e8       	ldi	r30, 0x81	; 129
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	84 60       	ori	r24, 0x04	; 4
 162:	80 83       	st	Z, r24
    //Enables interrupts for OCR1A and OCR1B
    TIMSK1 |= (1 << OCIE1B)|(1 << OCIE1A);
 164:	ef e6       	ldi	r30, 0x6F	; 111
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	86 60       	ori	r24, 0x06	; 6
 16c:	80 83       	st	Z, r24
    
    TCCR2A |= (1 << COM2A1)|(1 << COM2B1)|(1 << WGM20);
 16e:	e0 eb       	ldi	r30, 0xB0	; 176
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	81 6a       	ori	r24, 0xA1	; 161
 176:	80 83       	st	Z, r24
    TCCR2B |= (1 << CS22)|(1 << CS21);
 178:	e1 eb       	ldi	r30, 0xB1	; 177
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	86 60       	ori	r24, 0x06	; 6
 180:	80 83       	st	Z, r24
    //Enables interrupts for OCR2B
    TIMSK2 |= (1 << OCIE2A);
 182:	e0 e7       	ldi	r30, 0x70	; 112
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret

0000018e <__vector_1>:
volatile uint8_t bass = 0;
volatile uint8_t mid = 0;
volatile uint8_t treb = 0;

ISR(INT0_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
    // @todo
}
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_2>:

ISR(INT1_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
    // @todo
}
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <system_init>:
* @brief @todo
* @return void
*/
void system_init(void)
{
    timer_init();
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <timer_init>
    adc_init();
 1ba:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
    msgeq7_init();  
 1be:	0e 94 a2 00 	call	0x144	; 0x144 <msgeq7_init>
 1c2:	08 95       	ret

000001c4 <main>:
    // @todo
}

int main(void)
{
    system_init();
 1c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <system_init>
    sei();
 1c8:	78 94       	sei
        // Get audio levels
        msgeq7_get_audio(audio_level);
        
        // Assign to bass/mid/treb
        bass = ((audio_level[0] + audio_level[1])                  >> 1);   // average values
        mid  = ((audio_level[2] + audio_level[3] + audio_level[4]) /  3);   // average values
 1ca:	0f 2e       	mov	r0, r31
 1cc:	f3 e0       	ldi	r31, 0x03	; 3
 1ce:	cf 2e       	mov	r12, r31
 1d0:	d1 2c       	mov	r13, r1
 1d2:	f0 2d       	mov	r31, r0
/*!
* @brief @todo
*/
inline void timer_update(uint8_t red, uint8_t blue, uint8_t green)
{
    RED_CMP = red;
 1d4:	0f 2e       	mov	r0, r31
 1d6:	fa e8       	ldi	r31, 0x8A	; 138
 1d8:	ef 2e       	mov	r14, r31
 1da:	f1 2c       	mov	r15, r1
 1dc:	f0 2d       	mov	r31, r0
    BLU_CMP = blue;
 1de:	03 eb       	ldi	r16, 0xB3	; 179
 1e0:	10 e0       	ldi	r17, 0x00	; 0
    GRN_CMP = green;
 1e2:	c8 e8       	ldi	r28, 0x88	; 136
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
    sei();

    while (1) 
    {
        // Get audio levels
        msgeq7_get_audio(audio_level);
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 6d 00 	call	0xda	; 0xda <msgeq7_get_audio>
        
        // Assign to bass/mid/treb
        bass = ((audio_level[0] + audio_level[1])                  >> 1);   // average values
 1ee:	e3 e0       	ldi	r30, 0x03	; 3
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	20 81       	ld	r18, Z
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	82 0f       	add	r24, r18
 1fa:	91 1d       	adc	r25, r1
 1fc:	95 95       	asr	r25
 1fe:	87 95       	ror	r24
 200:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bass>
        mid  = ((audio_level[2] + audio_level[3] + audio_level[4]) /  3);   // average values
 204:	22 81       	ldd	r18, Z+2	; 0x02
 206:	83 81       	ldd	r24, Z+3	; 0x03
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	82 0f       	add	r24, r18
 20c:	91 1d       	adc	r25, r1
 20e:	24 81       	ldd	r18, Z+4	; 0x04
 210:	82 0f       	add	r24, r18
 212:	91 1d       	adc	r25, r1
 214:	b6 01       	movw	r22, r12
 216:	0e 94 28 01 	call	0x250	; 0x250 <__divmodhi4>
 21a:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <mid>
        treb = ((audio_level[5] + audio_level[6])                  >> 1);   // average values
 21e:	25 81       	ldd	r18, Z+5	; 0x05
 220:	86 81       	ldd	r24, Z+6	; 0x06
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	82 0f       	add	r24, r18
 226:	91 1d       	adc	r25, r1
 228:	95 95       	asr	r25
 22a:	87 95       	ror	r24
 22c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        
        // Assign to timer outputs
        timer_update(treb, bass, mid);
 230:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mid>
 234:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <bass>
 238:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
/*!
* @brief @todo
*/
inline void timer_update(uint8_t red, uint8_t blue, uint8_t green)
{
    RED_CMP = red;
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f7 01       	movw	r30, r14
 240:	31 83       	std	Z+1, r19	; 0x01
 242:	20 83       	st	Z, r18
    BLU_CMP = blue;
 244:	f8 01       	movw	r30, r16
 246:	90 83       	st	Z, r25
    GRN_CMP = green;
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	99 83       	std	Y+1, r25	; 0x01
 24c:	88 83       	st	Y, r24
 24e:	cb cf       	rjmp	.-106    	; 0x1e6 <main+0x22>

00000250 <__divmodhi4>:
 250:	97 fb       	bst	r25, 7
 252:	07 2e       	mov	r0, r23
 254:	16 f4       	brtc	.+4      	; 0x25a <__divmodhi4+0xa>
 256:	00 94       	com	r0
 258:	07 d0       	rcall	.+14     	; 0x268 <__divmodhi4_neg1>
 25a:	77 fd       	sbrc	r23, 7
 25c:	09 d0       	rcall	.+18     	; 0x270 <__divmodhi4_neg2>
 25e:	0e 94 3c 01 	call	0x278	; 0x278 <__udivmodhi4>
 262:	07 fc       	sbrc	r0, 7
 264:	05 d0       	rcall	.+10     	; 0x270 <__divmodhi4_neg2>
 266:	3e f4       	brtc	.+14     	; 0x276 <__divmodhi4_exit>

00000268 <__divmodhi4_neg1>:
 268:	90 95       	com	r25
 26a:	81 95       	neg	r24
 26c:	9f 4f       	sbci	r25, 0xFF	; 255
 26e:	08 95       	ret

00000270 <__divmodhi4_neg2>:
 270:	70 95       	com	r23
 272:	61 95       	neg	r22
 274:	7f 4f       	sbci	r23, 0xFF	; 255

00000276 <__divmodhi4_exit>:
 276:	08 95       	ret

00000278 <__udivmodhi4>:
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	51 e1       	ldi	r21, 0x11	; 17
 27e:	07 c0       	rjmp	.+14     	; 0x28e <__udivmodhi4_ep>

00000280 <__udivmodhi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	a6 17       	cp	r26, r22
 286:	b7 07       	cpc	r27, r23
 288:	10 f0       	brcs	.+4      	; 0x28e <__udivmodhi4_ep>
 28a:	a6 1b       	sub	r26, r22
 28c:	b7 0b       	sbc	r27, r23

0000028e <__udivmodhi4_ep>:
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	5a 95       	dec	r21
 294:	a9 f7       	brne	.-22     	; 0x280 <__udivmodhi4_loop>
 296:	80 95       	com	r24
 298:	90 95       	com	r25
 29a:	bc 01       	movw	r22, r24
 29c:	cd 01       	movw	r24, r26
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
