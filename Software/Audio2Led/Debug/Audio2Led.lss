
Audio2Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  0000032c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1e  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000935  00000000  00000000  0000106a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000685  00000000  00000000  0000199f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000475  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023c  00000000  00000000  000025dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002819  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_1>
   8:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 31       	cpi	r26, 0x11	; 17
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  88:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
    // Set entire ADC DDR to inputs with pullups on
    //ADC_DDR  = 0x00;
    //ADC_PORT = 0x00;
    
    // Set ADC for external AVcc reference, ADC channel 0
    ADMUX |= (1<<REFS0);
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
    
    // Disable digital input on ADC channel 0
    DIDR0 |= (1<<ADC0D);
  9a:	ee e7       	ldi	r30, 0x7E	; 126
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	80 83       	st	Z, r24
    
    // Enable ADC, prescale clock to divide by 2 (13 cycles / 8 MHz clk = 1.625 usec sample period). 
    ADCSRA |= (1<<ADEN);
  a4:	ea e7       	ldi	r30, 0x7A	; 122
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	80 83       	st	Z, r24
    
    // Do one ADC conversion to clear registers
    ADCSRA |= (1<<ADSC);
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
    while (ADCSRA & (1<<ADSC));    
  b4:	80 81       	ld	r24, Z
  b6:	86 fd       	sbrc	r24, 6
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <adc_init+0x24>
}
  ba:	08 95       	ret

000000bc <adc_get>:
/*!
* @brief @todo
* @return void
*/
uint16_t adc_get(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <adc_get+0x6>
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t adc_val = 0;
  c6:	1a 82       	std	Y+2, r1	; 0x02
  c8:	19 82       	std	Y+1, r1	; 0x01
    
    ADCSRA |= (1<<ADSC);            // Start conversion
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
    while (ADCSRA & (1<<ADSC));     // Wait for conversion to complete   
  d4:	80 81       	ld	r24, Z
  d6:	86 fd       	sbrc	r24, 6
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <adc_get+0x18>

    adc_val = ADCL;	                // Read lower byte from ADC     
  da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9a 83       	std	Y+2, r25	; 0x02
  e2:	89 83       	std	Y+1, r24	; 0x01
    adc_val = ADCH<<8;              // Read upper byte of ADC result
  e4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	98 2f       	mov	r25, r24
  ec:	88 27       	eor	r24, r24
  ee:	9a 83       	std	Y+2, r25	; 0x02
  f0:	89 83       	std	Y+1, r24	; 0x01
  
    return (adc_val);
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
}
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <msgeq7_get_audio>:
* @brief Get seven audio band levels from MSGEQ7
* @param[in] *audio     Pointer to location to store data read from MSGEQ7
* @return void
*/
void msgeq7_get_audio(uint16_t *audio)
{
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
    // Reset MSGEQ7
    MSGEQ7_STROBE_LOW();
 108:	5d 98       	cbi	0x0b, 5	; 11
    MSGEQ7_RESET_LOW();
 10a:	5e 98       	cbi	0x0b, 6	; 11
    MSGEQ7_RESET_HIGH();
 10c:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	ef e8       	ldi	r30, 0x8F	; 143
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <msgeq7_get_audio+0x12>
 116:	00 c0       	rjmp	.+0      	; 0x118 <msgeq7_get_audio+0x18>
 118:	00 00       	nop
    _delay_us(100);
    MSGEQ7_STROBE_HIGH();   
 11a:	5d 9a       	sbi	0x0b, 5	; 11
 11c:	e7 ec       	ldi	r30, 0xC7	; 199
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <msgeq7_get_audio+0x20>
 124:	00 c0       	rjmp	.+0      	; 0x126 <msgeq7_get_audio+0x26>
 126:	00 00       	nop
    _delay_us(50);
    MSGEQ7_STROBE_LOW();
 128:	5d 98       	cbi	0x0b, 5	; 11
 12a:	e7 ec       	ldi	r30, 0xC7	; 199
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <msgeq7_get_audio+0x2e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <msgeq7_get_audio+0x34>
 134:	00 00       	nop
    _delay_us(50);
    MSGEQ7_RESET_LOW();
 136:	5e 98       	cbi	0x0b, 6	; 11
    MSGEQ7_STROBE_HIGH();
 138:	5d 9a       	sbi	0x0b, 5	; 11
 13a:	e7 ec       	ldi	r30, 0xC7	; 199
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <msgeq7_get_audio+0x3e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <msgeq7_get_audio+0x44>
 144:	00 00       	nop
 146:	ec 01       	movw	r28, r24
 148:	8c 01       	movw	r16, r24
 14a:	02 5f       	subi	r16, 0xF2	; 242
 14c:	1f 4f       	sbci	r17, 0xFF	; 255
    _delay_us(50);

    // Strobe MSGEQ7 and read each band (4 samples per band)
    for (uint8_t i=0; i<MSGEQ7_AUD_BANDS; i++)
    {
        MSGEQ7_STROBE_LOW();
 14e:	5d 98       	cbi	0x0b, 5	; 11
 150:	f0 ea       	ldi	r31, 0xA0	; 160
 152:	fa 95       	dec	r31
 154:	f1 f7       	brne	.-4      	; 0x152 <msgeq7_get_audio+0x52>
        _delay_us(30);  // Strobe low pulse width (40 us of 80 us (+ ADC read time) strobe period) 
        audio[i] = adc_get();  // TBD, must take less than 40 us. Must do 4 or fewer conversions
 156:	0e 94 5e 00 	call	0xbc	; 0xbc <adc_get>
 15a:	89 93       	st	Y+, r24
 15c:	99 93       	st	Y+, r25
        MSGEQ7_STROBE_HIGH();
 15e:	5d 9a       	sbi	0x0b, 5	; 11
 160:	87 ec       	ldi	r24, 0xC7	; 199
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <msgeq7_get_audio+0x64>
 168:	00 c0       	rjmp	.+0      	; 0x16a <msgeq7_get_audio+0x6a>
 16a:	00 00       	nop
    MSGEQ7_RESET_LOW();
    MSGEQ7_STROBE_HIGH();
    _delay_us(50);

    // Strobe MSGEQ7 and read each band (4 samples per band)
    for (uint8_t i=0; i<MSGEQ7_AUD_BANDS; i++)
 16c:	c0 17       	cp	r28, r16
 16e:	d1 07       	cpc	r29, r17
 170:	71 f7       	brne	.-36     	; 0x14e <msgeq7_get_audio+0x4e>
        _delay_us(30);  // Strobe low pulse width (40 us of 80 us (+ ADC read time) strobe period) 
        audio[i] = adc_get();  // TBD, must take less than 40 us. Must do 4 or fewer conversions
        MSGEQ7_STROBE_HIGH();
        _delay_us(50);  // @todo: subtract adc_get_avg time from this. It should be ok to leave in but if timing is an issue take it out
    }  
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <msgeq7_init>:

void msgeq7_init(void)
{
    GPIO_DDR  |=  ((1<<MSGEQ7_STR) | (1<<MSGEQ7_RST));  // Set rst and strobe to output
 17c:	8a b1       	in	r24, 0x0a	; 10
 17e:	80 66       	ori	r24, 0x60	; 96
 180:	8a b9       	out	0x0a, r24	; 10
 182:	08 95       	ret

00000184 <timer_init>:
/*!
* @brief @todo
*/
void timer_init(void)
{
    DDRB = 0X3F;
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	84 b9       	out	0x04, r24	; 4
    
    //Sets timer 1 clear on compare match (output to low level) for output compares a and b
    TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1 << WGM10);
 188:	e0 e8       	ldi	r30, 0x80	; 128
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	81 6a       	ori	r24, 0xA1	; 161
 190:	80 83       	st	Z, r24
    //Set prescalar to clk/256 (
    TCCR1B |= (1 << CS12);
 192:	e1 e8       	ldi	r30, 0x81	; 129
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	80 83       	st	Z, r24
    //Enables interrupts for OCR1A and OCR1B
    TIMSK1 |= (1 << OCIE1B)|(1 << OCIE1A);
 19c:	ef e6       	ldi	r30, 0x6F	; 111
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	86 60       	ori	r24, 0x06	; 6
 1a4:	80 83       	st	Z, r24
    
    TCCR2A |= (1 << COM2A1)|(1 << COM2B1)|(1 << WGM20);
 1a6:	e0 eb       	ldi	r30, 0xB0	; 176
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	81 6a       	ori	r24, 0xA1	; 161
 1ae:	80 83       	st	Z, r24
    TCCR2B |= (1 << CS22)|(1 << CS21);
 1b0:	e1 eb       	ldi	r30, 0xB1	; 177
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	86 60       	ori	r24, 0x06	; 6
 1b8:	80 83       	st	Z, r24
    //Enables interrupts for OCR2B
    TIMSK2 |= (1 << OCIE2A);
 1ba:	e0 e7       	ldi	r30, 0x70	; 112
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	80 83       	st	Z, r24
 1c4:	08 95       	ret

000001c6 <__vector_1>:
uint8_t bass = 0;
uint8_t mid = 0;
uint8_t treb = 0;

ISR(INT0_vect)
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
    // @todo
}
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_2>:

ISR(INT1_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
    // @todo
}
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <system_init>:
* @brief @todo
* @return void
*/
void system_init(void)
{
    timer_init();
 1ee:	0e 94 c2 00 	call	0x184	; 0x184 <timer_init>
    adc_init();
 1f2:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
    msgeq7_init();  
 1f6:	0e 94 be 00 	call	0x17c	; 0x17c <msgeq7_init>
 1fa:	08 95       	ret

000001fc <main>:
}

int main(void)
{
    //WDTCSR &= (1 << WDIE);
    system_init();
 1fc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <system_init>
/*!
* @brief @todo
*/
inline void timer_update(uint8_t red, uint8_t blue, uint8_t green)
{
    RED_CMP = red;
 200:	0f 2e       	mov	r0, r31
 202:	fa e8       	ldi	r31, 0x8A	; 138
 204:	ef 2e       	mov	r14, r31
 206:	f1 2c       	mov	r15, r1
 208:	f0 2d       	mov	r31, r0
    BLU_CMP = blue;
 20a:	03 eb       	ldi	r16, 0xB3	; 179
 20c:	10 e0       	ldi	r17, 0x00	; 0
    GRN_CMP = green;
 20e:	c8 e8       	ldi	r28, 0x88	; 136
 210:	d0 e0       	ldi	r29, 0x00	; 0

    while (1) 
    {
        // Get audio levels
        msgeq7_get_audio(audio_level);
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 80 00 	call	0x100	; 0x100 <msgeq7_get_audio>
        
        // Assign to bass/mid/treb
        bass = (uint8_t) ((audio_level[0] + audio_level[1])                  >> 3);         // bitshift 2 over (cast to 8 bit) and average
 21a:	e3 e0       	ldi	r30, 0x03	; 3
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	42 81       	ldd	r20, Z+2	; 0x02
 220:	53 81       	ldd	r21, Z+3	; 0x03
 222:	80 81       	ld	r24, Z
 224:	91 81       	ldd	r25, Z+1	; 0x01
 226:	48 0f       	add	r20, r24
 228:	59 1f       	adc	r21, r25
 22a:	56 95       	lsr	r21
 22c:	47 95       	ror	r20
 22e:	56 95       	lsr	r21
 230:	47 95       	ror	r20
 232:	56 95       	lsr	r21
 234:	47 95       	ror	r20
 236:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <bass>
        mid  = (uint8_t)(((audio_level[2] + audio_level[3] + audio_level[4]) >> 2) / 3);    // bitshift 2 over and average
 23a:	26 81       	ldd	r18, Z+6	; 0x06
 23c:	37 81       	ldd	r19, Z+7	; 0x07
 23e:	84 81       	ldd	r24, Z+4	; 0x04
 240:	95 81       	ldd	r25, Z+5	; 0x05
 242:	28 0f       	add	r18, r24
 244:	39 1f       	adc	r19, r25
 246:	80 85       	ldd	r24, Z+8	; 0x08
 248:	91 85       	ldd	r25, Z+9	; 0x09
 24a:	28 0f       	add	r18, r24
 24c:	39 1f       	adc	r19, r25
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	36 95       	lsr	r19
 254:	27 95       	ror	r18
 256:	ab ea       	ldi	r26, 0xAB	; 171
 258:	ba ea       	ldi	r27, 0xAA	; 170
 25a:	0e 94 4b 01 	call	0x296	; 0x296 <__umulhisi3>
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mid>
        treb = (uint8_t) ((audio_level[5] + audio_level[6])                  >> 3);         // bitshift 2 over and average
 266:	64 85       	ldd	r22, Z+12	; 0x0c
 268:	75 85       	ldd	r23, Z+13	; 0x0d
 26a:	22 85       	ldd	r18, Z+10	; 0x0a
 26c:	33 85       	ldd	r19, Z+11	; 0x0b
 26e:	26 0f       	add	r18, r22
 270:	37 1f       	adc	r19, r23
 272:	36 95       	lsr	r19
 274:	27 95       	ror	r18
 276:	36 95       	lsr	r19
 278:	27 95       	ror	r18
 27a:	36 95       	lsr	r19
 27c:	27 95       	ror	r18
 27e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
/*!
* @brief @todo
*/
inline void timer_update(uint8_t red, uint8_t blue, uint8_t green)
{
    RED_CMP = red;
 282:	33 27       	eor	r19, r19
 284:	f7 01       	movw	r30, r14
 286:	31 83       	std	Z+1, r19	; 0x01
 288:	20 83       	st	Z, r18
    BLU_CMP = blue;
 28a:	f8 01       	movw	r30, r16
 28c:	40 83       	st	Z, r20
    GRN_CMP = green;
 28e:	99 27       	eor	r25, r25
 290:	99 83       	std	Y+1, r25	; 0x01
 292:	88 83       	st	Y, r24
 294:	be cf       	rjmp	.-132    	; 0x212 <main+0x16>

00000296 <__umulhisi3>:
 296:	a2 9f       	mul	r26, r18
 298:	b0 01       	movw	r22, r0
 29a:	b3 9f       	mul	r27, r19
 29c:	c0 01       	movw	r24, r0
 29e:	a3 9f       	mul	r26, r19
 2a0:	70 0d       	add	r23, r0
 2a2:	81 1d       	adc	r24, r1
 2a4:	11 24       	eor	r1, r1
 2a6:	91 1d       	adc	r25, r1
 2a8:	b2 9f       	mul	r27, r18
 2aa:	70 0d       	add	r23, r0
 2ac:	81 1d       	adc	r24, r1
 2ae:	11 24       	eor	r1, r1
 2b0:	91 1d       	adc	r25, r1
 2b2:	08 95       	ret

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
