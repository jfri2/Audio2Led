
Audio2Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  000002f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be8  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000937  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065e  00000000  00000000  00001937  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047b  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022a  00000000  00000000  00002547  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002771  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_1>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 31       	cpi	r26, 0x11	; 17
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  88:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
//     // Do one ADC conversion to clear registers
//     ADCSRA |= (1<<ADSC);
//     while (ADCSRA & (1<<ADSC));    

                                // setup the Analog to Digital Converter
                                ADMUX = 0x40;		// start by selecting the voltage reference - Avcc
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	80 83       	st	Z, r24
                                ADMUX = ADMUX | 0x00;   // Select the ADC channel - channel 0
  98:	80 81       	ld	r24, Z
  9a:	80 83       	st	Z, r24
                                ADMUX = ADMUX | 0x20;	// set for Left Justified - Only using 8 bit of resolution
  9c:	80 81       	ld	r24, Z
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	80 83       	st	Z, r24
                                
                                ADCSRA = 0x04;	// select the ADC clock frequency - Clock / 128
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	80 83       	st	Z, r24
                                ADCSRA = ADCSRA | 0x80;	// enable the ADC
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <adc_get>:
//     while (ADCSRA & (1<<ADSC));     // Wait for conversion to complete   
//     return (ADCH);                  // Return upper byte of ADC register (left justified)

	uint8_t value;			// 8-bit value to hold the result
	
	ADMUX = ADMUX & 0xE0;		// clear the channel data
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 7e       	andi	r24, 0xE0	; 224
  ba:	80 83       	st	Z, r24

	ADCSRA = ADCSRA | 0x40;	// start a conversion
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
	
	while( (ADCSRA & 0x10) == 0 )	// wait for conversion to be completed
  c6:	80 81       	ld	r24, Z
  c8:	84 ff       	sbrs	r24, 4
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <adc_get+0x14>
	{
	}
	
	value = ADCH;		// get the upper 8-bits
  cc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCSRA = ADCSRA | 0x10;	// clear the conversion flag
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	90 81       	ld	r25, Z
  d6:	90 61       	ori	r25, 0x10	; 16
  d8:	90 83       	st	Z, r25
	
	return value;			// send back the 8-bit results
}
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	08 95       	ret

000000de <msgeq7_get_audio>:
* @brief Get seven audio band levels from MSGEQ7
* @param[in] *audio     Pointer to location to store data read from MSGEQ7
* @return void
*/
void msgeq7_get_audio(uint8_t *audio)
{
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
    // Reset MSGEQ7
    MSGEQ7_STROBE_HIGH();
  e6:	5d 9a       	sbi	0x0b, 5	; 11
    MSGEQ7_RESET_HIGH();
  e8:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	ef e3       	ldi	r30, 0x3F	; 63
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <msgeq7_get_audio+0x10>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <msgeq7_get_audio+0x16>
  f4:	00 00       	nop
    _delay_us(80);          // 80 us delay (72 minimum in datasheet)
    MSGEQ7_STROBE_LOW();   
  f6:	2b b1       	in	r18, 0x0b	; 11
  f8:	2f 6d       	ori	r18, 0xDF	; 223
  fa:	2b b9       	out	0x0b, r18	; 11
  fc:	f0 ea       	ldi	r31, 0xA0	; 160
  fe:	fa 95       	dec	r31
 100:	f1 f7       	brne	.-4      	; 0xfe <msgeq7_get_audio+0x20>
    _delay_us(30);          // 30 us delay (total of 110 us, minimum 100 us in datasheet)
    MSGEQ7_RESET_LOW();     
 102:	2b b1       	in	r18, 0x0b	; 11
 104:	2f 6b       	ori	r18, 0xBF	; 191
 106:	2b b9       	out	0x0b, r18	; 11
    MSGEQ7_STROBE_HIGH();
 108:	5d 9a       	sbi	0x0b, 5	; 11
 10a:	25 ed       	ldi	r18, 0xD5	; 213
 10c:	2a 95       	dec	r18
 10e:	f1 f7       	brne	.-4      	; 0x10c <msgeq7_get_audio+0x2e>
 110:	00 00       	nop
 112:	ec 01       	movw	r28, r24
 114:	8c 01       	movw	r16, r24
 116:	09 5f       	subi	r16, 0xF9	; 249
 118:	1f 4f       	sbci	r17, 0xFF	; 255
    _delay_us(40);          // This puts us at to (minimum 36 us delay from rst going low)

    // Strobe MSGEQ7 and read each band (4 samples per band)
    for (uint8_t i=0; i<MSGEQ7_AUD_BANDS; i++)
    {
        MSGEQ7_STROBE_LOW();
 11a:	9b b1       	in	r25, 0x0b	; 11
 11c:	9f 6d       	ori	r25, 0xDF	; 223
 11e:	9b b9       	out	0x0b, r25	; 11
 120:	85 ed       	ldi	r24, 0xD5	; 213
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <msgeq7_get_audio+0x44>
 126:	00 00       	nop
        _delay_us(40);  // Strobe low pulse width (40 us of 80 us (+ ADC read time) strobe period) 
        audio[i] = adc_get();  // TBD, must take less than 40 us. Must do 4 or fewer conversions. @todo, make this average 4
 128:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_get>
 12c:	89 93       	st	Y+, r24
        MSGEQ7_STROBE_HIGH();
 12e:	5d 9a       	sbi	0x0b, 5	; 11
 130:	e5 ed       	ldi	r30, 0xD5	; 213
 132:	ea 95       	dec	r30
 134:	f1 f7       	brne	.-4      	; 0x132 <msgeq7_get_audio+0x54>
 136:	00 00       	nop
    MSGEQ7_RESET_LOW();     
    MSGEQ7_STROBE_HIGH();
    _delay_us(40);          // This puts us at to (minimum 36 us delay from rst going low)

    // Strobe MSGEQ7 and read each band (4 samples per band)
    for (uint8_t i=0; i<MSGEQ7_AUD_BANDS; i++)
 138:	c0 17       	cp	r28, r16
 13a:	d1 07       	cpc	r29, r17
 13c:	71 f7       	brne	.-36     	; 0x11a <msgeq7_get_audio+0x3c>
        _delay_us(40);  // Strobe low pulse width (40 us of 80 us (+ ADC read time) strobe period) 
        audio[i] = adc_get();  // TBD, must take less than 40 us. Must do 4 or fewer conversions. @todo, make this average 4
        MSGEQ7_STROBE_HIGH();
        _delay_us(40);  // @todo: subtract adc_get_avg time from this. It should be ok to leave in but if timing is an issue take it out
    }  
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	08 95       	ret

00000148 <msgeq7_init>:

void msgeq7_init(void)
{
    GPIO_DDR  |=  ((1<<MSGEQ7_STR) | (1<<MSGEQ7_RST));  // Set rst and strobe to output
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	80 66       	ori	r24, 0x60	; 96
 14c:	8a b9       	out	0x0a, r24	; 10
 14e:	08 95       	ret

00000150 <timer_init>:
/*!
* @brief @todo
*/
void timer_init(void)
{
    DDRB = 0X3F;
 150:	8f e3       	ldi	r24, 0x3F	; 63
 152:	84 b9       	out	0x04, r24	; 4
    
    //Sets timer 1 clear on compare match (output to low level) for output compares a and b
    TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1 << WGM10);
 154:	e0 e8       	ldi	r30, 0x80	; 128
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	81 6a       	ori	r24, 0xA1	; 161
 15c:	80 83       	st	Z, r24
    //Set prescalar to clk/256 (
    TCCR1B |= (1 << CS12);
 15e:	e1 e8       	ldi	r30, 0x81	; 129
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	84 60       	ori	r24, 0x04	; 4
 166:	80 83       	st	Z, r24
    //Enables interrupts for OCR1A and OCR1B
    TIMSK1 |= (1 << OCIE1B)|(1 << OCIE1A);
 168:	ef e6       	ldi	r30, 0x6F	; 111
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	86 60       	ori	r24, 0x06	; 6
 170:	80 83       	st	Z, r24
    
    TCCR2A |= (1 << COM2A1)|(1 << COM2B1)|(1 << WGM20);
 172:	e0 eb       	ldi	r30, 0xB0	; 176
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	81 6a       	ori	r24, 0xA1	; 161
 17a:	80 83       	st	Z, r24
    TCCR2B |= (1 << CS22)|(1 << CS21);
 17c:	e1 eb       	ldi	r30, 0xB1	; 177
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	86 60       	ori	r24, 0x06	; 6
 184:	80 83       	st	Z, r24
    //Enables interrupts for OCR2B
    TIMSK2 |= (1 << OCIE2A);
 186:	e0 e7       	ldi	r30, 0x70	; 112
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	80 83       	st	Z, r24
 190:	08 95       	ret

00000192 <__vector_1>:
uint8_t bass = 0;
uint8_t mid = 0;
uint8_t treb = 0;

ISR(INT0_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
    // @todo
}
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_2>:

ISR(INT1_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
    // @todo
}
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <system_init>:
* @brief @todo
* @return void
*/
void system_init(void)
{
    timer_init();
 1ba:	0e 94 a8 00 	call	0x150	; 0x150 <timer_init>
    adc_init();
 1be:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
    msgeq7_init();  
 1c2:	0e 94 a4 00 	call	0x148	; 0x148 <msgeq7_init>
 1c6:	08 95       	ret

000001c8 <main>:
    // @todo
}

int main(void)
{
    system_init();
 1c8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <system_init>
/*!
* @brief @todo
*/
inline void timer_update(uint8_t red, uint8_t blue, uint8_t green)
{
    RED_CMP = red;
 1cc:	0f 2e       	mov	r0, r31
 1ce:	fa e8       	ldi	r31, 0x8A	; 138
 1d0:	ef 2e       	mov	r14, r31
 1d2:	f1 2c       	mov	r15, r1
 1d4:	f0 2d       	mov	r31, r0
    BLU_CMP = blue;
 1d6:	03 eb       	ldi	r16, 0xB3	; 179
 1d8:	10 e0       	ldi	r17, 0x00	; 0
    GRN_CMP = green;
 1da:	c8 e8       	ldi	r28, 0x88	; 136
 1dc:	d0 e0       	ldi	r29, 0x00	; 0

    while (1) 
    {
        // Get audio levels
        msgeq7_get_audio(audio_level);
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 6f 00 	call	0xde	; 0xde <msgeq7_get_audio>
        
        // Assign to bass/mid/treb
        bass = (uint8_t) ((audio_level[0] + audio_level[1])                  >> 3);         // bitshift 2 over (cast to 8 bit) and average
 1e6:	e3 e0       	ldi	r30, 0x03	; 3
 1e8:	f1 e0       	ldi	r31, 0x01	; 1
 1ea:	42 81       	ldd	r20, Z+2	; 0x02
 1ec:	53 81       	ldd	r21, Z+3	; 0x03
 1ee:	80 81       	ld	r24, Z
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
 1f2:	48 0f       	add	r20, r24
 1f4:	59 1f       	adc	r21, r25
 1f6:	56 95       	lsr	r21
 1f8:	47 95       	ror	r20
 1fa:	56 95       	lsr	r21
 1fc:	47 95       	ror	r20
 1fe:	56 95       	lsr	r21
 200:	47 95       	ror	r20
 202:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <bass>
        mid  = (uint8_t)(((audio_level[2] + audio_level[3] + audio_level[4]) >> 2) / 3);    // bitshift 2 over and average
 206:	26 81       	ldd	r18, Z+6	; 0x06
 208:	37 81       	ldd	r19, Z+7	; 0x07
 20a:	84 81       	ldd	r24, Z+4	; 0x04
 20c:	95 81       	ldd	r25, Z+5	; 0x05
 20e:	28 0f       	add	r18, r24
 210:	39 1f       	adc	r19, r25
 212:	80 85       	ldd	r24, Z+8	; 0x08
 214:	91 85       	ldd	r25, Z+9	; 0x09
 216:	28 0f       	add	r18, r24
 218:	39 1f       	adc	r19, r25
 21a:	36 95       	lsr	r19
 21c:	27 95       	ror	r18
 21e:	36 95       	lsr	r19
 220:	27 95       	ror	r18
 222:	ab ea       	ldi	r26, 0xAB	; 171
 224:	ba ea       	ldi	r27, 0xAA	; 170
 226:	0e 94 31 01 	call	0x262	; 0x262 <__umulhisi3>
 22a:	96 95       	lsr	r25
 22c:	87 95       	ror	r24
 22e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mid>
        treb = (uint8_t) ((audio_level[5] + audio_level[6])                  >> 3);         // bitshift 2 over and average
 232:	64 85       	ldd	r22, Z+12	; 0x0c
 234:	75 85       	ldd	r23, Z+13	; 0x0d
 236:	22 85       	ldd	r18, Z+10	; 0x0a
 238:	33 85       	ldd	r19, Z+11	; 0x0b
 23a:	26 0f       	add	r18, r22
 23c:	37 1f       	adc	r19, r23
 23e:	36 95       	lsr	r19
 240:	27 95       	ror	r18
 242:	36 95       	lsr	r19
 244:	27 95       	ror	r18
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
/*!
* @brief @todo
*/
inline void timer_update(uint8_t red, uint8_t blue, uint8_t green)
{
    RED_CMP = red;
 24e:	33 27       	eor	r19, r19
 250:	f7 01       	movw	r30, r14
 252:	31 83       	std	Z+1, r19	; 0x01
 254:	20 83       	st	Z, r18
    BLU_CMP = blue;
 256:	f8 01       	movw	r30, r16
 258:	40 83       	st	Z, r20
    GRN_CMP = green;
 25a:	99 27       	eor	r25, r25
 25c:	99 83       	std	Y+1, r25	; 0x01
 25e:	88 83       	st	Y, r24
 260:	be cf       	rjmp	.-132    	; 0x1de <main+0x16>

00000262 <__umulhisi3>:
 262:	a2 9f       	mul	r26, r18
 264:	b0 01       	movw	r22, r0
 266:	b3 9f       	mul	r27, r19
 268:	c0 01       	movw	r24, r0
 26a:	a3 9f       	mul	r26, r19
 26c:	70 0d       	add	r23, r0
 26e:	81 1d       	adc	r24, r1
 270:	11 24       	eor	r1, r1
 272:	91 1d       	adc	r25, r1
 274:	b2 9f       	mul	r27, r18
 276:	70 0d       	add	r23, r0
 278:	81 1d       	adc	r24, r1
 27a:	11 24       	eor	r1, r1
 27c:	91 1d       	adc	r25, r1
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
