
Audio2Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003fa  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800102  00800102  00000490  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c91  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093e  00000000  00000000  00001249  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c2  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  0000234c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000484  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c7  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_1>
   8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_2>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	62 01       	movw	r12, r4
  6a:	69 01       	movw	r12, r18
  6c:	76 01       	movw	r14, r12
  6e:	83 01       	movw	r16, r6
  70:	90 01       	movw	r18, r0
  72:	9d 01       	movw	r18, r26
  74:	aa 01       	movw	r20, r20
  76:	b7 01       	movw	r22, r14

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ea ef       	ldi	r30, 0xFA	; 250
  8c:	f3 e0       	ldi	r31, 0x03	; 3
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	a2 e0       	ldi	r26, 0x02	; 2
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	af 30       	cpi	r26, 0x0F	; 15
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  ae:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <adc_init>:
*/
void adc_init(void)
{

    // setup the Analog to Digital Converter
    ADMUX = 0x40;		        // start by selecting the voltage reference - Avcc
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
    ADMUX = ADMUX | 0x00;       // Select the ADC channel - channel 0
  be:	80 81       	ld	r24, Z
  c0:	80 83       	st	Z, r24
    ADMUX = ADMUX | 0x20;	    // set for Left Justified - Only using 8 bit of resolution
  c2:	80 81       	ld	r24, Z
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	80 83       	st	Z, r24
    ADMUX |= (1 << REFS0);	    //Sets reference to AVcc                                 
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
    ADCSRA = 0x04;	            // select the ADC clock frequency - Clock / 128
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	80 83       	st	Z, r24
    ADCSRA = ADCSRA | 0x80;	    // enable the ADC
  d6:	80 81       	ld	r24, Z
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
        
    // Do one ADC conversion to clear registers
    ADCSRA |= (1<<ADSC);
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
    while (ADCSRA & (1<<ADSC));   
  e2:	80 81       	ld	r24, Z
  e4:	86 fd       	sbrc	r24, 6
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <adc_init+0x2c>
    DDRD |= (1<<PORTD7); 
  e8:	57 9a       	sbi	0x0a, 7	; 10
  ea:	08 95       	ret

000000ec <adc_get>:
* @brief @todo
* @return void
*/
uint8_t adc_get(void)
{    
PORTD |= (1<<PORTD7);       // DEBUG
  ec:	5f 9a       	sbi	0x0b, 7	; 11
    ADCSRA |= (1<<ADSC);            // Start conversion
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
    while (ADCSRA & (1<<ADSC));     // Wait for conversion to complete   
  f8:	80 81       	ld	r24, Z
  fa:	86 fd       	sbrc	r24, 6
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <adc_get+0xc>
PORTD &= ~(1<<PORTD7);      // DEBUG
  fe:	5f 98       	cbi	0x0b, 7	; 11
    return (ADCH);
 100:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 104:	08 95       	ret

00000106 <msgeq7_get_audio>:
* @brief Get seven audio band levels from MSGEQ7
* @param[in] *audio     Pointer to location to store data read from MSGEQ7
* @return void
*/
void msgeq7_get_audio(uint8_t *audio)
{
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
    // Reset MSGEQ7
    MSGEQ7_STROBE_LOW();
 10e:	5d 98       	cbi	0x0b, 5	; 11
    MSGEQ7_RESET_LOW();
 110:	5e 98       	cbi	0x0b, 6	; 11
    MSGEQ7_RESET_HIGH();
 112:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	ef e8       	ldi	r30, 0x8F	; 143
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <msgeq7_get_audio+0x12>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <msgeq7_get_audio+0x18>
 11e:	00 00       	nop
    _delay_us(100);
    MSGEQ7_STROBE_HIGH();   
 120:	5d 9a       	sbi	0x0b, 5	; 11
 122:	e7 ec       	ldi	r30, 0xC7	; 199
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <msgeq7_get_audio+0x20>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <msgeq7_get_audio+0x26>
 12c:	00 00       	nop
    _delay_us(50);
    MSGEQ7_STROBE_LOW();
 12e:	5d 98       	cbi	0x0b, 5	; 11
 130:	e7 ec       	ldi	r30, 0xC7	; 199
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <msgeq7_get_audio+0x2e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <msgeq7_get_audio+0x34>
 13a:	00 00       	nop
    _delay_us(50);
    MSGEQ7_RESET_LOW();
 13c:	5e 98       	cbi	0x0b, 6	; 11
    MSGEQ7_STROBE_HIGH();
 13e:	5d 9a       	sbi	0x0b, 5	; 11
 140:	e7 ec       	ldi	r30, 0xC7	; 199
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <msgeq7_get_audio+0x3e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <msgeq7_get_audio+0x44>
 14a:	00 00       	nop
 14c:	ec 01       	movw	r28, r24
 14e:	8c 01       	movw	r16, r24
 150:	09 5f       	subi	r16, 0xF9	; 249
 152:	1f 4f       	sbci	r17, 0xFF	; 255
    _delay_us(50);

    // Strobe MSGEQ7 and read each band (4 samples per band)
    for (uint8_t i=0; i<MSGEQ7_AUD_BANDS; i++)
    {
        MSGEQ7_STROBE_LOW();
 154:	5d 98       	cbi	0x0b, 5	; 11
 156:	f0 ea       	ldi	r31, 0xA0	; 160
 158:	fa 95       	dec	r31
 15a:	f1 f7       	brne	.-4      	; 0x158 <msgeq7_get_audio+0x52>
        _delay_us(30);  // Strobe low pulse width (40 us of 80 us (+ ADC read time) strobe period) 
        audio[i] = adc_get();  // TBD, must take less than 40 us. Must do 4 or fewer conversions
 15c:	0e 94 76 00 	call	0xec	; 0xec <adc_get>
 160:	89 93       	st	Y+, r24
 162:	8a e1       	ldi	r24, 0x1A	; 26
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <msgeq7_get_audio+0x5e>
 168:	00 c0       	rjmp	.+0      	; 0x16a <msgeq7_get_audio+0x64>
        _delay_us(5);
        MSGEQ7_STROBE_HIGH();
 16a:	5d 9a       	sbi	0x0b, 5	; 11
 16c:	e7 ec       	ldi	r30, 0xC7	; 199
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <msgeq7_get_audio+0x6a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <msgeq7_get_audio+0x70>
 176:	00 00       	nop
    MSGEQ7_RESET_LOW();
    MSGEQ7_STROBE_HIGH();
    _delay_us(50);

    // Strobe MSGEQ7 and read each band (4 samples per band)
    for (uint8_t i=0; i<MSGEQ7_AUD_BANDS; i++)
 178:	c0 17       	cp	r28, r16
 17a:	d1 07       	cpc	r29, r17
 17c:	59 f7       	brne	.-42     	; 0x154 <msgeq7_get_audio+0x4e>
        audio[i] = adc_get();  // TBD, must take less than 40 us. Must do 4 or fewer conversions
        _delay_us(5);
        MSGEQ7_STROBE_HIGH();
        _delay_us(50);  // @todo: subtract adc_get_avg time from this. It should be ok to leave in but if timing is an issue take it out
    }  
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <msgeq7_init>:

void msgeq7_init(void)
{
    GPIO_DDR  |=  ((1<<MSGEQ7_STR) | (1<<MSGEQ7_RST));  // Set rst and strobe to output
 188:	8a b1       	in	r24, 0x0a	; 10
 18a:	80 66       	ori	r24, 0x60	; 96
 18c:	8a b9       	out	0x0a, r24	; 10
 18e:	08 95       	ret

00000190 <timer_init>:
/*!
* @brief @todo
*/
void timer_init(void)
{
    DDRB = 0X3F;
 190:	8f e3       	ldi	r24, 0x3F	; 63
 192:	84 b9       	out	0x04, r24	; 4
    
    //Sets timer 1 clear on compare match (output to low level) for output compares a and b
    TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1 << WGM10);
 194:	e0 e8       	ldi	r30, 0x80	; 128
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	81 6a       	ori	r24, 0xA1	; 161
 19c:	80 83       	st	Z, r24
    //Set prescalar to clk/256 (
    TCCR1B |= (1 << CS12);
 19e:	e1 e8       	ldi	r30, 0x81	; 129
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	84 60       	ori	r24, 0x04	; 4
 1a6:	80 83       	st	Z, r24
    //Enables interrupts for OCR1A and OCR1B
    TIMSK1 |= (1 << OCIE1B)|(1 << OCIE1A);
 1a8:	ef e6       	ldi	r30, 0x6F	; 111
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	86 60       	ori	r24, 0x06	; 6
 1b0:	80 83       	st	Z, r24
    
    TCCR2A |= (1 << COM2A1)|(1 << COM2B1)|(1 << WGM20);
 1b2:	e0 eb       	ldi	r30, 0xB0	; 176
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	81 6a       	ori	r24, 0xA1	; 161
 1ba:	80 83       	st	Z, r24
    TCCR2B |= (1 << CS22)|(1 << CS21);
 1bc:	e1 eb       	ldi	r30, 0xB1	; 177
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	86 60       	ori	r24, 0x06	; 6
 1c4:	80 83       	st	Z, r24
    //Enables interrupts for OCR2B
    TIMSK2 |= (1 << OCIE2A);
 1c6:	e0 e7       	ldi	r30, 0x70	; 112
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <timer_update>:
}

void timer_update(uint8_t red, uint8_t green, uint8_t blue)
{
    RED_CMP = red;
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1d8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    BLU_CMP = blue;
 1dc:	40 93 b3 00 	sts	0x00B3, r20	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    GRN_CMP = green;
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1e6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ea:	08 95       	ret

000001ec <__vector_1>:
uint8_t blue;

volatile uint8_t button_counter = 3;

ISR(INT0_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
    button_counter++;
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    if (button_counter > MAX_BUTTON_VAL) button_counter = 0;
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	10 f0       	brcs	.+4      	; 0x20e <__vector_1+0x22>
 20a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
}
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_2>:

ISR(INT1_vect)
{
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
    // @todo
}
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <system_init>:
* @brief @todo
* @return void
*/
void system_init(void)
{
    msgeq7_init(); 
 22e:	0e 94 c4 00 	call	0x188	; 0x188 <msgeq7_init>
    adc_init();
 232:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc_init>
    timer_init(); 
 236:	0e 94 c8 00 	call	0x190	; 0x190 <timer_init>
 23a:	08 95       	ret

0000023c <main>:
    // @todo
}

int main(void)
{
    system_init();
 23c:	0e 94 17 01 	call	0x22e	; 0x22e <system_init>
    sei();          // Enable global interrupts
 240:	78 94       	sei
        // Get audio
        msgeq7_get_audio(audio_level);
        
        // Assign to bass/mid/treb
        bass = audio_level[0];
        mid  = (((audio_level[1] + audio_level[2] + audio_level[3]) / 3));
 242:	c3 e0       	ldi	r28, 0x03	; 3
 244:	d0 e0       	ldi	r29, 0x00	; 0
	    if (treb < 30) treb = 0;
        
        switch (button_counter)
        {
            case 0:
                red = 50;
 246:	12 e3       	ldi	r17, 0x32	; 50
    sei();          // Enable global interrupts
        
    while (1) 
    {
        // Get audio
        msgeq7_get_audio(audio_level);
 248:	87 e0       	ldi	r24, 0x07	; 7
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 83 00 	call	0x106	; 0x106 <msgeq7_get_audio>
        
        // Assign to bass/mid/treb
        bass = audio_level[0];
 250:	e7 e0       	ldi	r30, 0x07	; 7
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	20 81       	ld	r18, Z
 256:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <bass>
        mid  = (((audio_level[1] + audio_level[2] + audio_level[3]) / 3));
 25a:	31 81       	ldd	r19, Z+1	; 0x01
 25c:	82 81       	ldd	r24, Z+2	; 0x02
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	83 0f       	add	r24, r19
 262:	91 1d       	adc	r25, r1
 264:	33 81       	ldd	r19, Z+3	; 0x03
 266:	83 0f       	add	r24, r19
 268:	91 1d       	adc	r25, r1
 26a:	be 01       	movw	r22, r28
 26c:	0e 94 cd 01 	call	0x39a	; 0x39a <__divmodhi4>
 270:	36 2f       	mov	r19, r22
 272:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <mid>
        treb = (((audio_level[4] + audio_level[5] + audio_level[6]) / 3));
 276:	44 81       	ldd	r20, Z+4	; 0x04
 278:	85 81       	ldd	r24, Z+5	; 0x05
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	84 0f       	add	r24, r20
 27e:	91 1d       	adc	r25, r1
 280:	46 81       	ldd	r20, Z+6	; 0x06
 282:	84 0f       	add	r24, r20
 284:	91 1d       	adc	r25, r1
 286:	be 01       	movw	r22, r28
 288:	0e 94 cd 01 	call	0x39a	; 0x39a <__divmodhi4>
 28c:	86 2f       	mov	r24, r22
 28e:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
        
        // Normal Playback
	    if (bass < 30) bass = 0;
 292:	2e 31       	cpi	r18, 0x1E	; 30
 294:	10 f4       	brcc	.+4      	; 0x29a <main+0x5e>
 296:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <bass>
	    if (mid < 30) mid = 0;
 29a:	3e 31       	cpi	r19, 0x1E	; 30
 29c:	10 f4       	brcc	.+4      	; 0x2a2 <main+0x66>
 29e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <mid>
	    if (treb < 30) treb = 0;
 2a2:	8e 31       	cpi	r24, 0x1E	; 30
 2a4:	10 f4       	brcc	.+4      	; 0x2aa <main+0x6e>
 2a6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
        
        switch (button_counter)
 2aa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 2ae:	8e 2f       	mov	r24, r30
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	88 30       	cpi	r24, 0x08	; 8
 2b4:	91 05       	cpc	r25, r1
 2b6:	08 f0       	brcs	.+2      	; 0x2ba <main+0x7e>
 2b8:	61 c0       	rjmp	.+194    	; 0x37c <main+0x140>
 2ba:	fc 01       	movw	r30, r24
 2bc:	ec 5c       	subi	r30, 0xCC	; 204
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__tablejump2__>
        {
            case 0:
                red = 50;
 2c4:	10 93 06 01 	sts	0x0106, r17	; 0x800106 <red>
                green = 0;
 2c8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <green>
                blue = 50;
 2cc:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <blue>
            break;
 2d0:	5b c0       	rjmp	.+182    	; 0x388 <main+0x14c>
            
            case 1:
                red = bass;
 2d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bass>
 2d6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <red>
                green = mid;
 2da:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mid>
 2de:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <green>
                blue = treb;
 2e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2e6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <blue>
            break;
 2ea:	4e c0       	rjmp	.+156    	; 0x388 <main+0x14c>
            
            case 2:
                red = mid;
 2ec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mid>
 2f0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <red>
                green = treb;
 2f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2f8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <green>
                blue = bass;
 2fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bass>
 300:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <blue>
            break;
 304:	41 c0       	rjmp	.+130    	; 0x388 <main+0x14c>
            
            case 3:
                red = treb;
 306:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 30a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <red>
                green = bass;
 30e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bass>
 312:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <green>
                blue = mid;
 316:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mid>
 31a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <blue>
            break;
 31e:	34 c0       	rjmp	.+104    	; 0x388 <main+0x14c>
            
            case 4:
                red = bass;
 320:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bass>
 324:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <red>
                green = treb;
 328:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 32c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <green>
                blue = mid;
 330:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mid>
 334:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <blue>
            break;
 338:	27 c0       	rjmp	.+78     	; 0x388 <main+0x14c>
            
            case 5:
                red = mid;
 33a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mid>
 33e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <red>
                green = bass;
 342:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bass>
 346:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <green>
                blue = treb;
 34a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 34e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <blue>
            break;
 352:	1a c0       	rjmp	.+52     	; 0x388 <main+0x14c>
            
            case 6:
                red = treb;
 354:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 358:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <red>
                green = mid;
 35c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mid>
 360:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <green>
                blue = bass;
 364:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bass>
 368:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <blue>
            break;
 36c:	0d c0       	rjmp	.+26     	; 0x388 <main+0x14c>
            
            case 7:
                red = 0;
 36e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <red>
                green = 0;
 372:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <green>
                blue = 0;
 376:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <blue>
            break;
 37a:	06 c0       	rjmp	.+12     	; 0x388 <main+0x14c>
            
            default:
                red = 0;
 37c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <red>
                green = 0;
 380:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <green>
                blue = 0;
 384:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <blue>
            break;
        }

        // Update outputs
        timer_update(red, green, blue);
 388:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <blue>
 38c:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <green>
 390:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <red>
 394:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <timer_update>
    }
 398:	57 cf       	rjmp	.-338    	; 0x248 <main+0xc>

0000039a <__divmodhi4>:
 39a:	97 fb       	bst	r25, 7
 39c:	07 2e       	mov	r0, r23
 39e:	16 f4       	brtc	.+4      	; 0x3a4 <__divmodhi4+0xa>
 3a0:	00 94       	com	r0
 3a2:	07 d0       	rcall	.+14     	; 0x3b2 <__divmodhi4_neg1>
 3a4:	77 fd       	sbrc	r23, 7
 3a6:	09 d0       	rcall	.+18     	; 0x3ba <__divmodhi4_neg2>
 3a8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__udivmodhi4>
 3ac:	07 fc       	sbrc	r0, 7
 3ae:	05 d0       	rcall	.+10     	; 0x3ba <__divmodhi4_neg2>
 3b0:	3e f4       	brtc	.+14     	; 0x3c0 <__divmodhi4_exit>

000003b2 <__divmodhi4_neg1>:
 3b2:	90 95       	com	r25
 3b4:	81 95       	neg	r24
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	08 95       	ret

000003ba <__divmodhi4_neg2>:
 3ba:	70 95       	com	r23
 3bc:	61 95       	neg	r22
 3be:	7f 4f       	sbci	r23, 0xFF	; 255

000003c0 <__divmodhi4_exit>:
 3c0:	08 95       	ret

000003c2 <__tablejump2__>:
 3c2:	ee 0f       	add	r30, r30
 3c4:	ff 1f       	adc	r31, r31
 3c6:	05 90       	lpm	r0, Z+
 3c8:	f4 91       	lpm	r31, Z
 3ca:	e0 2d       	mov	r30, r0
 3cc:	09 94       	ijmp

000003ce <__udivmodhi4>:
 3ce:	aa 1b       	sub	r26, r26
 3d0:	bb 1b       	sub	r27, r27
 3d2:	51 e1       	ldi	r21, 0x11	; 17
 3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <__udivmodhi4_ep>

000003d6 <__udivmodhi4_loop>:
 3d6:	aa 1f       	adc	r26, r26
 3d8:	bb 1f       	adc	r27, r27
 3da:	a6 17       	cp	r26, r22
 3dc:	b7 07       	cpc	r27, r23
 3de:	10 f0       	brcs	.+4      	; 0x3e4 <__udivmodhi4_ep>
 3e0:	a6 1b       	sub	r26, r22
 3e2:	b7 0b       	sbc	r27, r23

000003e4 <__udivmodhi4_ep>:
 3e4:	88 1f       	adc	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	5a 95       	dec	r21
 3ea:	a9 f7       	brne	.-22     	; 0x3d6 <__udivmodhi4_loop>
 3ec:	80 95       	com	r24
 3ee:	90 95       	com	r25
 3f0:	bc 01       	movw	r22, r24
 3f2:	cd 01       	movw	r24, r26
 3f4:	08 95       	ret

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
