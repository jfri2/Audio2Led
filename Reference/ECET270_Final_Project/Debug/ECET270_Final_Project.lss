
ECET270_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000075e  000007f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000075e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  000007f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a63  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003d5  00000000  00000000  0000135f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000446  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e0  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000447  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000025b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_1>
   8:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <main>
  9e:	0c 94 ad 03 	jmp	0x75a	; 0x75a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <read_ADC>:
	
uint8_t read_ADC(void)
{
	uint8_t value;			// 8-bit value to hold the result
	
	ADMUX = ADMUX & 0xE0;		// clear the channel data
  a6:	80 91 7c 00 	lds	r24, 0x007C
  aa:	80 7e       	andi	r24, 0xE0	; 224
  ac:	80 93 7c 00 	sts	0x007C, r24

	ADCSRA = ADCSRA | 0x40;	// start a conversion
  b0:	80 91 7a 00 	lds	r24, 0x007A
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 93 7a 00 	sts	0x007A, r24
	
 	while( (ADCSRA & 0x10) == 0 )	// wait for conversion to be completed
  ba:	80 91 7a 00 	lds	r24, 0x007A
  be:	84 ff       	sbrs	r24, 4
  c0:	fc cf       	rjmp	.-8      	; 0xba <read_ADC+0x14>
	{
	}
	
	value = ADCH;		// get the upper 8-bits
  c2:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA | 0x10;	// clear the conversion flag
  c6:	90 91 7a 00 	lds	r25, 0x007A
  ca:	90 61       	ori	r25, 0x10	; 16
  cc:	90 93 7a 00 	sts	0x007A, r25
	
	return value;			// send back the 8-bit result
}
  d0:	08 95       	ret

000000d2 <IncrementUp>:

void IncrementUp(uint8_t led, uint8_t max_val)
{
	uint8_t i = 0;		//LCV

	while((i < max_val) & (display_select != 0x00))
  d2:	90 91 01 01 	lds	r25, 0x0101
  d6:	66 23       	and	r22, r22
  d8:	f9 f0       	breq	.+62     	; 0x118 <IncrementUp+0x46>
  da:	99 23       	and	r25, r25
  dc:	e9 f0       	breq	.+58     	; 0x118 <IncrementUp+0x46>
	delay_us(1000 * delay_value);		//delay
}

void IncrementUp(uint8_t led, uint8_t max_val)
{
	uint8_t i = 0;		//LCV
  de:	90 e0       	ldi	r25, 0x00	; 0

	while((i < max_val) & (display_select != 0x00))
	{
		switch(led)
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	f1 f0       	breq	.+60     	; 0x120 <IncrementUp+0x4e>
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	c9 f0       	breq	.+50     	; 0x11a <IncrementUp+0x48>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	31 f4       	brne	.+12     	; 0xf8 <IncrementUp+0x26>
		{
			case 1:
			RED		= i;
  ec:	29 2f       	mov	r18, r25
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	30 93 8b 00 	sts	0x008B, r19
  f4:	20 93 8a 00 	sts	0x008A, r18
			break;
			case 3:
			BLUE	= i;
			break;
		}
		i++;
  f8:	9f 5f       	subi	r25, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	33 ec       	ldi	r19, 0xC3	; 195
  fe:	49 e0       	ldi	r20, 0x09	; 9
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	40 40       	sbci	r20, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <IncrementUp+0x2e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <IncrementUp+0x38>
 10a:	00 00       	nop

void IncrementUp(uint8_t led, uint8_t max_val)
{
	uint8_t i = 0;		//LCV

	while((i < max_val) & (display_select != 0x00))
 10c:	20 91 01 01 	lds	r18, 0x0101
 110:	96 17       	cp	r25, r22
 112:	10 f4       	brcc	.+4      	; 0x118 <IncrementUp+0x46>
 114:	21 11       	cpse	r18, r1
 116:	e4 cf       	rjmp	.-56     	; 0xe0 <IncrementUp+0xe>
 118:	08 95       	ret
			break;
			case 2:
			GREEN	= i;
			break;
			case 3:
			BLUE	= i;
 11a:	90 93 b3 00 	sts	0x00B3, r25
			break;
 11e:	ec cf       	rjmp	.-40     	; 0xf8 <IncrementUp+0x26>
		{
			case 1:
			RED		= i;
			break;
			case 2:
			GREEN	= i;
 120:	29 2f       	mov	r18, r25
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	30 93 89 00 	sts	0x0089, r19
 128:	20 93 88 00 	sts	0x0088, r18
			break;
 12c:	e5 cf       	rjmp	.-54     	; 0xf8 <IncrementUp+0x26>

0000012e <IncrementDown>:
}
void IncrementDown(uint8_t led, uint8_t max_val)
{
	uint8_t i = 0;		//LCV

	while((i < max_val) & (display_select != 0x00))
 12e:	90 91 01 01 	lds	r25, 0x0101
 132:	66 23       	and	r22, r22
 134:	11 f1       	breq	.+68     	; 0x17a <IncrementDown+0x4c>
 136:	99 23       	and	r25, r25
 138:	01 f1       	breq	.+64     	; 0x17a <IncrementDown+0x4c>
		_delay_ms(led_delay);
	}
}
void IncrementDown(uint8_t led, uint8_t max_val)
{
	uint8_t i = 0;		//LCV
 13a:	90 e0       	ldi	r25, 0x00	; 0
		{
			case 1:
			RED		= max_val - i;
			break;
			case 2:
			GREEN	= max_val - i;
 13c:	26 2f       	mov	r18, r22
 13e:	30 e0       	ldi	r19, 0x00	; 0
{
	uint8_t i = 0;		//LCV

	while((i < max_val) & (display_select != 0x00))
	{
		switch(led)
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	09 f1       	breq	.+66     	; 0x186 <IncrementDown+0x58>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	d1 f0       	breq	.+52     	; 0x17c <IncrementDown+0x4e>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	39 f4       	brne	.+14     	; 0x15a <IncrementDown+0x2c>
		{
			case 1:
			RED		= max_val - i;
 14c:	a9 01       	movw	r20, r18
 14e:	49 1b       	sub	r20, r25
 150:	51 09       	sbc	r21, r1
 152:	50 93 8b 00 	sts	0x008B, r21
 156:	40 93 8a 00 	sts	0x008A, r20
			break;
			case 3:
			BLUE	= max_val - i;
			break;
		}
		i++;
 15a:	9f 5f       	subi	r25, 0xFF	; 255
 15c:	4f ef       	ldi	r20, 0xFF	; 255
 15e:	53 ec       	ldi	r21, 0xC3	; 195
 160:	79 e0       	ldi	r23, 0x09	; 9
 162:	41 50       	subi	r20, 0x01	; 1
 164:	50 40       	sbci	r21, 0x00	; 0
 166:	70 40       	sbci	r23, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <IncrementDown+0x34>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <IncrementDown+0x3e>
 16c:	00 00       	nop
}
void IncrementDown(uint8_t led, uint8_t max_val)
{
	uint8_t i = 0;		//LCV

	while((i < max_val) & (display_select != 0x00))
 16e:	40 91 01 01 	lds	r20, 0x0101
 172:	96 17       	cp	r25, r22
 174:	10 f4       	brcc	.+4      	; 0x17a <IncrementDown+0x4c>
 176:	41 11       	cpse	r20, r1
 178:	e3 cf       	rjmp	.-58     	; 0x140 <IncrementDown+0x12>
 17a:	08 95       	ret
 17c:	46 2f       	mov	r20, r22
 17e:	49 1b       	sub	r20, r25
			break;
			case 2:
			GREEN	= max_val - i;
			break;
			case 3:
			BLUE	= max_val - i;
 180:	40 93 b3 00 	sts	0x00B3, r20
			break;
 184:	ea cf       	rjmp	.-44     	; 0x15a <IncrementDown+0x2c>
		{
			case 1:
			RED		= max_val - i;
			break;
			case 2:
			GREEN	= max_val - i;
 186:	a9 01       	movw	r20, r18
 188:	49 1b       	sub	r20, r25
 18a:	51 09       	sbc	r21, r1
 18c:	50 93 89 00 	sts	0x0089, r21
 190:	40 93 88 00 	sts	0x0088, r20
			break;
 194:	e2 cf       	rjmp	.-60     	; 0x15a <IncrementDown+0x2c>

00000196 <GetAudioBandLevel>:
		_delay_ms(led_delay);
	}
}

void GetAudioBandLevel(void)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
	uint8_t audio_band = 0;
	DDRD	|=	(1 << STROBE)|(1 << EQ_RESET);				//PORTD bit strobe and reset pins output
 19a:	8a b1       	in	r24, 0x0a	; 10
 19c:	80 66       	ori	r24, 0x60	; 96
 19e:	8a b9       	out	0x0a, r24	; 10
	PORTD	&=	~((1 << STROBE)|(1 << EQ_RESET));			//sets strobe and reset low
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8f 79       	andi	r24, 0x9F	; 159
 1a4:	8b b9       	out	0x0b, r24	; 11
	PORTD	|=	(1 << EQ_RESET);							//reset goes high
 1a6:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <GetAudioBandLevel+0x16>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <GetAudioBandLevel+0x1c>
 1b2:	00 00       	nop
	_delay_us(100);											//delay 100usec for setup time req
	PORTD	|=	(1 << STROBE);								//strobe goes high
 1b4:	5d 9a       	sbi	0x0b, 5	; 11
 1b6:	87 ec       	ldi	r24, 0xC7	; 199
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <GetAudioBandLevel+0x24>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <GetAudioBandLevel+0x2a>
 1c0:	00 00       	nop
	_delay_us(50);											//strobe delays
	PORTD	&=	~(1 << STROBE);								//strobe goes low
 1c2:	5d 98       	cbi	0x0b, 5	; 11
 1c4:	87 ec       	ldi	r24, 0xC7	; 199
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <GetAudioBandLevel+0x32>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <GetAudioBandLevel+0x38>
 1ce:	00 00       	nop
	_delay_us(50);											//strobe delays
	PORTD	&=	~(1 << EQ_RESET);							//reset reset
 1d0:	5e 98       	cbi	0x0b, 6	; 11
	PORTD	|=	(1 << STROBE);								//strobe goes high
 1d2:	5d 9a       	sbi	0x0b, 5	; 11
 1d4:	87 ec       	ldi	r24, 0xC7	; 199
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <GetAudioBandLevel+0x42>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <GetAudioBandLevel+0x48>
 1de:	00 00       	nop
 1e0:	c2 e0       	ldi	r28, 0x02	; 2
 1e2:	d1 e0       	ldi	r29, 0x01	; 1
		
	for(audio_band = 0; audio_band < 7; audio_band++)
	{
		//Commented out for debugging only
		
		PORTD	&=	~(1 << STROBE);				//resets (set strobe pin low (active))
 1e4:	5d 98       	cbi	0x0b, 5	; 11
 1e6:	90 ea       	ldi	r25, 0xA0	; 160
 1e8:	9a 95       	dec	r25
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <GetAudioBandLevel+0x52>
		_delay_us(30);							//setup time for capture
		AudioLevel[audio_band] = read_ADC();	//reads 8 bit resolution audio level from audio bandpass filter
 1ec:	0e 94 53 00 	call	0xa6	; 0xa6 <read_ADC>
 1f0:	89 93       	st	Y+, r24
		PORTD	|=	(1 << STROBE);					//sets (set strobe pin high again)
 1f2:	5d 9a       	sbi	0x0b, 5	; 11
 1f4:	87 ec       	ldi	r24, 0xC7	; 199
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <GetAudioBandLevel+0x62>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <GetAudioBandLevel+0x68>
 1fe:	00 00       	nop
	_delay_us(50);											//strobe delays
	PORTD	&=	~(1 << EQ_RESET);							//reset reset
	PORTD	|=	(1 << STROBE);								//strobe goes high
	_delay_us(50);				
		
	for(audio_band = 0; audio_band < 7; audio_band++)
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	c9 30       	cpi	r28, 0x09	; 9
 204:	d9 07       	cpc	r29, r25
 206:	71 f7       	brne	.-36     	; 0x1e4 <GetAudioBandLevel+0x4e>
		_delay_us(30);							//setup time for capture
		AudioLevel[audio_band] = read_ADC();	//reads 8 bit resolution audio level from audio bandpass filter
		PORTD	|=	(1 << STROBE);					//sets (set strobe pin high again)
		_delay_us(50);							//not sure if needed - check datasheet
	}
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <MusicOnLed>:

void MusicOnLed(void)
{
 20e:	3f 92       	push	r3
 210:	4f 92       	push	r4
 212:	5f 92       	push	r5
 214:	6f 92       	push	r6
 216:	7f 92       	push	r7
 218:	8f 92       	push	r8
 21a:	9f 92       	push	r9
 21c:	af 92       	push	r10
 21e:	bf 92       	push	r11
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
	
	GetAudioBandLevel();
 230:	0e 94 cb 00 	call	0x196	; 0x196 <GetAudioBandLevel>
	out_low		= (AudioLevel[0] + AudioLevel[1]) / 2;						// Average of two Lowest Bands
 234:	80 91 02 01 	lds	r24, 0x0102
 238:	20 91 03 01 	lds	r18, 0x0103
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	28 0f       	add	r18, r24
 240:	31 1d       	adc	r19, r1
 242:	35 95       	asr	r19
 244:	27 95       	ror	r18
 246:	20 93 0a 01 	sts	0x010A, r18
	out_mid		= (AudioLevel[2] + AudioLevel [3] + AudioLevel[4]) / 3;		// Average of three Middle Bands
 24a:	40 91 04 01 	lds	r20, 0x0104
 24e:	80 91 05 01 	lds	r24, 0x0105
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	84 0f       	add	r24, r20
 256:	91 1d       	adc	r25, r1
 258:	40 91 06 01 	lds	r20, 0x0106
 25c:	84 0f       	add	r24, r20
 25e:	91 1d       	adc	r25, r1
 260:	63 e0       	ldi	r22, 0x03	; 3
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	0e 94 85 03 	call	0x70a	; 0x70a <__divmodhi4>
 268:	eb 01       	movw	r28, r22
 26a:	60 93 0b 01 	sts	0x010B, r22
	out_high	= (AudioLevel[5] + AudioLevel[6]) / 2;						// Average of two Highest Bands
 26e:	80 91 07 01 	lds	r24, 0x0107
 272:	00 91 08 01 	lds	r16, 0x0108
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	08 0f       	add	r16, r24
 27a:	11 1d       	adc	r17, r1
 27c:	15 95       	asr	r17
 27e:	07 95       	ror	r16
 280:	30 2e       	mov	r3, r16
 282:	00 93 09 01 	sts	0x0109, r16
	
	float low_multiplier	= 1.5;
	float mid_multiplier	= 1;
	float high_multiplier	= 1;
		
	uint8_t led_out_low		=	out_low * low_multiplier;
 286:	b9 01       	movw	r22, r18
 288:	88 27       	eor	r24, r24
 28a:	77 fd       	sbrc	r23, 7
 28c:	80 95       	com	r24
 28e:	98 2f       	mov	r25, r24
 290:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__floatsisf>
 294:	2b 01       	movw	r4, r22
 296:	3c 01       	movw	r6, r24
	uint8_t led_out_mid		=	out_mid * mid_multiplier;
 298:	be 01       	movw	r22, r28
 29a:	88 27       	eor	r24, r24
 29c:	77 fd       	sbrc	r23, 7
 29e:	80 95       	com	r24
 2a0:	98 2f       	mov	r25, r24
 2a2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__floatsisf>
 2a6:	4b 01       	movw	r8, r22
 2a8:	5c 01       	movw	r10, r24
	uint8_t led_out_high	=	out_high * high_multiplier;
 2aa:	b8 01       	movw	r22, r16
 2ac:	88 27       	eor	r24, r24
 2ae:	77 fd       	sbrc	r23, 7
 2b0:	80 95       	com	r24
 2b2:	98 2f       	mov	r25, r24
 2b4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__floatsisf>
 2b8:	6b 01       	movw	r12, r22
 2ba:	7c 01       	movw	r14, r24
	
	if(out_low >= (255 / low_multiplier))
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	4a e2       	ldi	r20, 0x2A	; 42
 2c2:	53 e4       	ldi	r21, 0x43	; 67
 2c4:	c3 01       	movw	r24, r6
 2c6:	b2 01       	movw	r22, r4
 2c8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__gesf2>
 2cc:	87 ff       	sbrs	r24, 7
 2ce:	40 c0       	rjmp	.+128    	; 0x350 <MusicOnLed+0x142>
	
	float low_multiplier	= 1.5;
	float mid_multiplier	= 1;
	float high_multiplier	= 1;
		
	uint8_t led_out_low		=	out_low * low_multiplier;
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 ec       	ldi	r20, 0xC0	; 192
 2d6:	5f e3       	ldi	r21, 0x3F	; 63
 2d8:	c3 01       	movw	r24, r6
 2da:	b2 01       	movw	r22, r4
 2dc:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__mulsf3>
 2e0:	0e 94 40 02 	call	0x480	; 0x480 <__fixunssfsi>
 2e4:	06 2f       	mov	r16, r22
 2e6:	10 e0       	ldi	r17, 0x00	; 0
	
	if(out_low >= (255 / low_multiplier))
	{
		led_out_low = 255;		//set to max brightness if overflow condition would otherwise occur
	}
	if(out_mid >= (255 / mid_multiplier))
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	4f e7       	ldi	r20, 0x7F	; 127
 2ee:	53 e4       	ldi	r21, 0x43	; 67
 2f0:	c5 01       	movw	r24, r10
 2f2:	b4 01       	movw	r22, r8
 2f4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__gesf2>
 2f8:	87 fd       	sbrc	r24, 7
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <MusicOnLed+0xf2>
 2fc:	cf ef       	ldi	r28, 0xFF	; 255
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
	{
		led_out_mid = 255;		//set to max brightness if overflow condition would otherwise occur
	}
	if(out_high >= (212 / high_multiplier))
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	44 e5       	ldi	r20, 0x54	; 84
 306:	53 e4       	ldi	r21, 0x43	; 67
 308:	c7 01       	movw	r24, r14
 30a:	b6 01       	movw	r22, r12
 30c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__gesf2>
 310:	87 fd       	sbrc	r24, 7
 312:	02 c0       	rjmp	.+4      	; 0x318 <MusicOnLed+0x10a>
	{
		led_out_high = 255;		//set to max brightness if overflow condition would otherwise occur
 314:	33 24       	eor	r3, r3
 316:	3a 94       	dec	r3
	}
	
	//assign to outputs
	GREEN	= led_out_low;
 318:	10 93 89 00 	sts	0x0089, r17
 31c:	00 93 88 00 	sts	0x0088, r16
	RED		= led_out_mid;
 320:	d0 93 8b 00 	sts	0x008B, r29
 324:	c0 93 8a 00 	sts	0x008A, r28
	BLUE	= led_out_high;
 328:	30 92 b3 00 	sts	0x00B3, r3
	//_delay_ms(10);			//old delay before menu implementation
	
	//_delay_ms(5);
	
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	df 90       	pop	r13
 33a:	cf 90       	pop	r12
 33c:	bf 90       	pop	r11
 33e:	af 90       	pop	r10
 340:	9f 90       	pop	r9
 342:	8f 90       	pop	r8
 344:	7f 90       	pop	r7
 346:	6f 90       	pop	r6
 348:	5f 90       	pop	r5
 34a:	4f 90       	pop	r4
 34c:	3f 90       	pop	r3
 34e:	08 95       	ret
 350:	0f ef       	ldi	r16, 0xFF	; 255
 352:	10 e0       	ldi	r17, 0x00	; 0
 354:	c9 cf       	rjmp	.-110    	; 0x2e8 <MusicOnLed+0xda>

00000356 <Init_IO>:

void Init_IO(void)
{
	DDRB = 0x3F;											//portb as output
 356:	9f e3       	ldi	r25, 0x3F	; 63
 358:	94 b9       	out	0x04, r25	; 4
	
	//SMCR |= (1 << SM0);									//Sets sleep mode 'ADC Noise Reduction'
	
	DDRD	&= ~(1 << SW0) | ~(1 << SW1) | ~(1 << SW2);		//portd bits 2, 3, and 4 as inputs (pushbuttons)
 35a:	8a b1       	in	r24, 0x0a	; 10
 35c:	8a b9       	out	0x0a, r24	; 10
	//DDRD	|= (1 << SW0) | (1 << SW1) | (1 << SW2);		//ddrd set high
	PORTD	|= (1 << SW0) | (1 << SW1) | (1 << SW2);		//turn pullups on only on pushbutton input pins
 35e:	8b b1       	in	r24, 0x0b	; 11
 360:	8c 61       	ori	r24, 0x1C	; 28
 362:	8b b9       	out	0x0b, r24	; 11
	//PORTD	&= (1 << SW0) | (1 << SW1) | (1 << SW2);		//sink mode
	
	//EICRA	= 0x0;											//Enables active LOW triggering on ext. interrupts on INT0 and INT1 pins (SW0 and SW1)
	EICRA	|= (1 << ISC11) | (1 << ISC01);					//Falling edge interrupt triggering
 364:	e9 e6       	ldi	r30, 0x69	; 105
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	8a 60       	ori	r24, 0x0A	; 10
 36c:	80 83       	st	Z, r24
	EIMSK	|= (1 << INT1) | (1 << INT0);					//Enables external interrupts on INT0 and INT1 (SW0 and SW1)	
 36e:	8d b3       	in	r24, 0x1d	; 29
 370:	83 60       	ori	r24, 0x03	; 3
 372:	8d bb       	out	0x1d, r24	; 29
		
	//PCMSK2	= 0x10;										//Enable interrupts on PCINT20 (SW2)
	//PCICR	|= (1 << 2);									//Enables interrupts on pin change request 2 reg	
		
	DDRC	= 0x00;											//port c as input
 374:	17 b8       	out	0x07, r1	; 7
	PORTC	= 0x3F;											//pullups on
 376:	98 b9       	out	0x08, r25	; 8
 378:	08 95       	ret

0000037a <FadeOnLed>:
}

void FadeOnLed(void)
{
	uint8_t increment_amount = 120;
	GREEN	= 0;
 37a:	10 92 89 00 	sts	0x0089, r1
 37e:	10 92 88 00 	sts	0x0088, r1
	BLUE	= 0;
 382:	10 92 b3 00 	sts	0x00B3, r1
	RED		= increment_amount;
 386:	88 e7       	ldi	r24, 0x78	; 120
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	90 93 8b 00 	sts	0x008B, r25
 38e:	80 93 8a 00 	sts	0x008A, r24
	//see led_delay for led delay time
	//RED is defined as 1, GREEN as 2, BLUE as 3 when passing values to function
	//while (display_select == 0x01)
	while(1)
	{
		IncrementUp(2, increment_amount);
 392:	68 e7       	ldi	r22, 0x78	; 120
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	0e 94 69 00 	call	0xd2	; 0xd2 <IncrementUp>
		IncrementDown(1, increment_amount);
 39a:	68 e7       	ldi	r22, 0x78	; 120
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 97 00 	call	0x12e	; 0x12e <IncrementDown>
		IncrementUp(3, increment_amount);
 3a2:	68 e7       	ldi	r22, 0x78	; 120
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	0e 94 69 00 	call	0xd2	; 0xd2 <IncrementUp>
		IncrementUp(1, increment_amount);
 3aa:	68 e7       	ldi	r22, 0x78	; 120
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 69 00 	call	0xd2	; 0xd2 <IncrementUp>
		IncrementDown(2, increment_amount);
 3b2:	68 e7       	ldi	r22, 0x78	; 120
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	0e 94 97 00 	call	0x12e	; 0x12e <IncrementDown>
		IncrementDown(1, increment_amount);
 3ba:	68 e7       	ldi	r22, 0x78	; 120
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 97 00 	call	0x12e	; 0x12e <IncrementDown>
		IncrementDown(3, increment_amount);
 3c2:	68 e7       	ldi	r22, 0x78	; 120
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	0e 94 97 00 	call	0x12e	; 0x12e <IncrementDown>
		IncrementUp(1, increment_amount);
 3ca:	68 e7       	ldi	r22, 0x78	; 120
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 69 00 	call	0xd2	; 0xd2 <IncrementUp>
		IncrementUp(2, increment_amount);
 3d2:	68 e7       	ldi	r22, 0x78	; 120
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	0e 94 69 00 	call	0xd2	; 0xd2 <IncrementUp>
		IncrementDown(2, increment_amount);
 3da:	68 e7       	ldi	r22, 0x78	; 120
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	0e 94 97 00 	call	0x12e	; 0x12e <IncrementDown>
 3e2:	d7 cf       	rjmp	.-82     	; 0x392 <FadeOnLed+0x18>

000003e4 <main>:
}

void ReadMCUSR(void)
{
	//stores info about what recently reset the micro
	status_reg_read = MCUSR;
 3e4:	84 b7       	in	r24, 0x34	; 52
 3e6:	80 93 00 01 	sts	0x0100, r24
	//cleara all flags in MCUSR
	MCUSR = 0x0;	
 3ea:	14 be       	out	0x34, r1	; 52
void init_ADC(void);

void init_ADC(void)
{
                                // setup the Analog to Digital Converter
	ADMUX = 0x40;		// start by selecting the voltage reference - Avcc
 3ec:	ec e7       	ldi	r30, 0x7C	; 124
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 e4       	ldi	r24, 0x40	; 64
 3f2:	80 83       	st	Z, r24
	ADMUX = ADMUX | 0x00;   // Select the ADC channel - channel 0
 3f4:	80 81       	ld	r24, Z
 3f6:	80 83       	st	Z, r24
	ADMUX = ADMUX | 0x20;	// set for Left Justified - Only using 8 bit of resolution
 3f8:	80 81       	ld	r24, Z
 3fa:	80 62       	ori	r24, 0x20	; 32
 3fc:	80 83       	st	Z, r24
	
	ADCSRA = 0x04;	// select the ADC clock frequency - Clock / 128
 3fe:	ea e7       	ldi	r30, 0x7A	; 122
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	84 e0       	ldi	r24, 0x04	; 4
 404:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x80;	// enable the ADC
 406:	80 81       	ld	r24, Z
 408:	80 68       	ori	r24, 0x80	; 128
 40a:	80 83       	st	Z, r24
}

void Init_Timer1_PWM(void)
{
	//Sets timer 1 clear on compare match (output to low level) for output compares and b
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1 << WGM10);
 40c:	e0 e8       	ldi	r30, 0x80	; 128
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	81 6a       	ori	r24, 0xA1	; 161
 414:	80 83       	st	Z, r24
	//Set prescalar to clk/256
	TCCR1B |= (1 << CS12);
 416:	e1 e8       	ldi	r30, 0x81	; 129
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	84 60       	ori	r24, 0x04	; 4
 41e:	80 83       	st	Z, r24
	//Enables interrupts for OCR1A and OCR1B
	TIMSK1 |= (1 << OCIE1B)|(1 << OCIE1A);	
 420:	ef e6       	ldi	r30, 0x6F	; 111
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	86 60       	ori	r24, 0x06	; 6
 428:	80 83       	st	Z, r24
	
}

void Init_Timer2_PWM(void)
{
	TCCR2A |= (1 << COM2A1)|(1 << COM2B1)|(1 << WGM20);
 42a:	e0 eb       	ldi	r30, 0xB0	; 176
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	81 6a       	ori	r24, 0xA1	; 161
 432:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22)|(1 << CS21);
 434:	e1 eb       	ldi	r30, 0xB1	; 177
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	86 60       	ori	r24, 0x06	; 6
 43c:	80 83       	st	Z, r24
	//Enables interrupts for OCR2B
	TIMSK2 |= (1 << OCIE2A);
 43e:	e0 e7       	ldi	r30, 0x70	; 112
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	82 60       	ori	r24, 0x02	; 2
 446:	80 83       	st	Z, r24
{
	ReadMCUSR();							//gets info about possible resets
	init_ADC();								//init ADC for channel 0, 8 bit resolution, ADC clock = clk/128
	Init_Timer1_PWM();						//timer1 and 2 as 8 bit output compares
	Init_Timer2_PWM();
	Init_IO();								//enables things and interrupts
 448:	0e 94 ab 01 	call	0x356	; 0x356 <Init_IO>
	EIFR |= (1 << INTF1)|(1 << INTF0);		//clears things
 44c:	8c b3       	in	r24, 0x1c	; 28
 44e:	83 60       	ori	r24, 0x03	; 3
 450:	8c bb       	out	0x1c, r24	; 28
	WDTCSR &= (1 << WDIE);
 452:	e0 e6       	ldi	r30, 0x60	; 96
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	80 74       	andi	r24, 0x40	; 64
 45a:	80 83       	st	Z, r24
	sei();									//enables global interrupts	
 45c:	78 94       	sei
				
    while(1)
    {
		FadeOnLed();
 45e:	0e 94 bd 01 	call	0x37a	; 0x37a <FadeOnLed>

00000462 <__vector_1>:
	GREEN = 100;
	BLUE = 0;
}

ISR(INT0_vect)
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
	//display_select = 0x00;
	//second_disp_sel = 0x00;
	while(1)
	{
		MusicOnLed();
 46c:	0e 94 07 01 	call	0x20e	; 0x20e <MusicOnLed>
 470:	fd cf       	rjmp	.-6      	; 0x46c <__vector_1+0xa>

00000472 <__vector_2>:
	}
}

ISR(INT1_vect)
{
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
	//display_select = 0x01;
	//second_disp_sel = 0x01;
	FadeOnLed();
 47c:	0e 94 bd 01 	call	0x37a	; 0x37a <FadeOnLed>

00000480 <__fixunssfsi>:
 480:	70 d0       	rcall	.+224    	; 0x562 <__fp_splitA>
 482:	88 f0       	brcs	.+34     	; 0x4a6 <__fixunssfsi+0x26>
 484:	9f 57       	subi	r25, 0x7F	; 127
 486:	90 f0       	brcs	.+36     	; 0x4ac <__fixunssfsi+0x2c>
 488:	b9 2f       	mov	r27, r25
 48a:	99 27       	eor	r25, r25
 48c:	b7 51       	subi	r27, 0x17	; 23
 48e:	a0 f0       	brcs	.+40     	; 0x4b8 <__fixunssfsi+0x38>
 490:	d1 f0       	breq	.+52     	; 0x4c6 <__fixunssfsi+0x46>
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	88 1f       	adc	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	1a f0       	brmi	.+6      	; 0x4a2 <__fixunssfsi+0x22>
 49c:	ba 95       	dec	r27
 49e:	c9 f7       	brne	.-14     	; 0x492 <__fixunssfsi+0x12>
 4a0:	12 c0       	rjmp	.+36     	; 0x4c6 <__fixunssfsi+0x46>
 4a2:	b1 30       	cpi	r27, 0x01	; 1
 4a4:	81 f0       	breq	.+32     	; 0x4c6 <__fixunssfsi+0x46>
 4a6:	77 d0       	rcall	.+238    	; 0x596 <__fp_zero>
 4a8:	b1 e0       	ldi	r27, 0x01	; 1
 4aa:	08 95       	ret
 4ac:	74 c0       	rjmp	.+232    	; 0x596 <__fp_zero>
 4ae:	67 2f       	mov	r22, r23
 4b0:	78 2f       	mov	r23, r24
 4b2:	88 27       	eor	r24, r24
 4b4:	b8 5f       	subi	r27, 0xF8	; 248
 4b6:	39 f0       	breq	.+14     	; 0x4c6 <__fixunssfsi+0x46>
 4b8:	b9 3f       	cpi	r27, 0xF9	; 249
 4ba:	cc f3       	brlt	.-14     	; 0x4ae <__fixunssfsi+0x2e>
 4bc:	86 95       	lsr	r24
 4be:	77 95       	ror	r23
 4c0:	67 95       	ror	r22
 4c2:	b3 95       	inc	r27
 4c4:	d9 f7       	brne	.-10     	; 0x4bc <__fixunssfsi+0x3c>
 4c6:	3e f4       	brtc	.+14     	; 0x4d6 <__fixunssfsi+0x56>
 4c8:	90 95       	com	r25
 4ca:	80 95       	com	r24
 4cc:	70 95       	com	r23
 4ce:	61 95       	neg	r22
 4d0:	7f 4f       	sbci	r23, 0xFF	; 255
 4d2:	8f 4f       	sbci	r24, 0xFF	; 255
 4d4:	9f 4f       	sbci	r25, 0xFF	; 255
 4d6:	08 95       	ret

000004d8 <__floatunsisf>:
 4d8:	e8 94       	clt
 4da:	09 c0       	rjmp	.+18     	; 0x4ee <__floatsisf+0x12>

000004dc <__floatsisf>:
 4dc:	97 fb       	bst	r25, 7
 4de:	3e f4       	brtc	.+14     	; 0x4ee <__floatsisf+0x12>
 4e0:	90 95       	com	r25
 4e2:	80 95       	com	r24
 4e4:	70 95       	com	r23
 4e6:	61 95       	neg	r22
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	8f 4f       	sbci	r24, 0xFF	; 255
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	99 23       	and	r25, r25
 4f0:	a9 f0       	breq	.+42     	; 0x51c <__floatsisf+0x40>
 4f2:	f9 2f       	mov	r31, r25
 4f4:	96 e9       	ldi	r25, 0x96	; 150
 4f6:	bb 27       	eor	r27, r27
 4f8:	93 95       	inc	r25
 4fa:	f6 95       	lsr	r31
 4fc:	87 95       	ror	r24
 4fe:	77 95       	ror	r23
 500:	67 95       	ror	r22
 502:	b7 95       	ror	r27
 504:	f1 11       	cpse	r31, r1
 506:	f8 cf       	rjmp	.-16     	; 0x4f8 <__floatsisf+0x1c>
 508:	fa f4       	brpl	.+62     	; 0x548 <__floatsisf+0x6c>
 50a:	bb 0f       	add	r27, r27
 50c:	11 f4       	brne	.+4      	; 0x512 <__floatsisf+0x36>
 50e:	60 ff       	sbrs	r22, 0
 510:	1b c0       	rjmp	.+54     	; 0x548 <__floatsisf+0x6c>
 512:	6f 5f       	subi	r22, 0xFF	; 255
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	8f 4f       	sbci	r24, 0xFF	; 255
 518:	9f 4f       	sbci	r25, 0xFF	; 255
 51a:	16 c0       	rjmp	.+44     	; 0x548 <__floatsisf+0x6c>
 51c:	88 23       	and	r24, r24
 51e:	11 f0       	breq	.+4      	; 0x524 <__floatsisf+0x48>
 520:	96 e9       	ldi	r25, 0x96	; 150
 522:	11 c0       	rjmp	.+34     	; 0x546 <__floatsisf+0x6a>
 524:	77 23       	and	r23, r23
 526:	21 f0       	breq	.+8      	; 0x530 <__floatsisf+0x54>
 528:	9e e8       	ldi	r25, 0x8E	; 142
 52a:	87 2f       	mov	r24, r23
 52c:	76 2f       	mov	r23, r22
 52e:	05 c0       	rjmp	.+10     	; 0x53a <__floatsisf+0x5e>
 530:	66 23       	and	r22, r22
 532:	71 f0       	breq	.+28     	; 0x550 <__floatsisf+0x74>
 534:	96 e8       	ldi	r25, 0x86	; 134
 536:	86 2f       	mov	r24, r22
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	2a f0       	brmi	.+10     	; 0x548 <__floatsisf+0x6c>
 53e:	9a 95       	dec	r25
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	da f7       	brpl	.-10     	; 0x53e <__floatsisf+0x62>
 548:	88 0f       	add	r24, r24
 54a:	96 95       	lsr	r25
 54c:	87 95       	ror	r24
 54e:	97 f9       	bld	r25, 7
 550:	08 95       	ret

00000552 <__fp_split3>:
 552:	57 fd       	sbrc	r21, 7
 554:	90 58       	subi	r25, 0x80	; 128
 556:	44 0f       	add	r20, r20
 558:	55 1f       	adc	r21, r21
 55a:	59 f0       	breq	.+22     	; 0x572 <__fp_splitA+0x10>
 55c:	5f 3f       	cpi	r21, 0xFF	; 255
 55e:	71 f0       	breq	.+28     	; 0x57c <__fp_splitA+0x1a>
 560:	47 95       	ror	r20

00000562 <__fp_splitA>:
 562:	88 0f       	add	r24, r24
 564:	97 fb       	bst	r25, 7
 566:	99 1f       	adc	r25, r25
 568:	61 f0       	breq	.+24     	; 0x582 <__fp_splitA+0x20>
 56a:	9f 3f       	cpi	r25, 0xFF	; 255
 56c:	79 f0       	breq	.+30     	; 0x58c <__fp_splitA+0x2a>
 56e:	87 95       	ror	r24
 570:	08 95       	ret
 572:	12 16       	cp	r1, r18
 574:	13 06       	cpc	r1, r19
 576:	14 06       	cpc	r1, r20
 578:	55 1f       	adc	r21, r21
 57a:	f2 cf       	rjmp	.-28     	; 0x560 <__fp_split3+0xe>
 57c:	46 95       	lsr	r20
 57e:	f1 df       	rcall	.-30     	; 0x562 <__fp_splitA>
 580:	08 c0       	rjmp	.+16     	; 0x592 <__fp_splitA+0x30>
 582:	16 16       	cp	r1, r22
 584:	17 06       	cpc	r1, r23
 586:	18 06       	cpc	r1, r24
 588:	99 1f       	adc	r25, r25
 58a:	f1 cf       	rjmp	.-30     	; 0x56e <__fp_splitA+0xc>
 58c:	86 95       	lsr	r24
 58e:	71 05       	cpc	r23, r1
 590:	61 05       	cpc	r22, r1
 592:	08 94       	sec
 594:	08 95       	ret

00000596 <__fp_zero>:
 596:	e8 94       	clt

00000598 <__fp_szero>:
 598:	bb 27       	eor	r27, r27
 59a:	66 27       	eor	r22, r22
 59c:	77 27       	eor	r23, r23
 59e:	cb 01       	movw	r24, r22
 5a0:	97 f9       	bld	r25, 7
 5a2:	08 95       	ret

000005a4 <__gesf2>:
 5a4:	66 d0       	rcall	.+204    	; 0x672 <__fp_cmp>
 5a6:	08 f4       	brcc	.+2      	; 0x5aa <__gesf2+0x6>
 5a8:	8f ef       	ldi	r24, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <__mulsf3>:
 5ac:	0b d0       	rcall	.+22     	; 0x5c4 <__mulsf3x>
 5ae:	9c c0       	rjmp	.+312    	; 0x6e8 <__fp_round>
 5b0:	8d d0       	rcall	.+282    	; 0x6cc <__fp_pscA>
 5b2:	28 f0       	brcs	.+10     	; 0x5be <__mulsf3+0x12>
 5b4:	92 d0       	rcall	.+292    	; 0x6da <__fp_pscB>
 5b6:	18 f0       	brcs	.+6      	; 0x5be <__mulsf3+0x12>
 5b8:	95 23       	and	r25, r21
 5ba:	09 f0       	breq	.+2      	; 0x5be <__mulsf3+0x12>
 5bc:	7e c0       	rjmp	.+252    	; 0x6ba <__fp_inf>
 5be:	83 c0       	rjmp	.+262    	; 0x6c6 <__fp_nan>
 5c0:	11 24       	eor	r1, r1
 5c2:	ea cf       	rjmp	.-44     	; 0x598 <__fp_szero>

000005c4 <__mulsf3x>:
 5c4:	c6 df       	rcall	.-116    	; 0x552 <__fp_split3>
 5c6:	a0 f3       	brcs	.-24     	; 0x5b0 <__mulsf3+0x4>

000005c8 <__mulsf3_pse>:
 5c8:	95 9f       	mul	r25, r21
 5ca:	d1 f3       	breq	.-12     	; 0x5c0 <__mulsf3+0x14>
 5cc:	95 0f       	add	r25, r21
 5ce:	50 e0       	ldi	r21, 0x00	; 0
 5d0:	55 1f       	adc	r21, r21
 5d2:	62 9f       	mul	r22, r18
 5d4:	f0 01       	movw	r30, r0
 5d6:	72 9f       	mul	r23, r18
 5d8:	bb 27       	eor	r27, r27
 5da:	f0 0d       	add	r31, r0
 5dc:	b1 1d       	adc	r27, r1
 5de:	63 9f       	mul	r22, r19
 5e0:	aa 27       	eor	r26, r26
 5e2:	f0 0d       	add	r31, r0
 5e4:	b1 1d       	adc	r27, r1
 5e6:	aa 1f       	adc	r26, r26
 5e8:	64 9f       	mul	r22, r20
 5ea:	66 27       	eor	r22, r22
 5ec:	b0 0d       	add	r27, r0
 5ee:	a1 1d       	adc	r26, r1
 5f0:	66 1f       	adc	r22, r22
 5f2:	82 9f       	mul	r24, r18
 5f4:	22 27       	eor	r18, r18
 5f6:	b0 0d       	add	r27, r0
 5f8:	a1 1d       	adc	r26, r1
 5fa:	62 1f       	adc	r22, r18
 5fc:	73 9f       	mul	r23, r19
 5fe:	b0 0d       	add	r27, r0
 600:	a1 1d       	adc	r26, r1
 602:	62 1f       	adc	r22, r18
 604:	83 9f       	mul	r24, r19
 606:	a0 0d       	add	r26, r0
 608:	61 1d       	adc	r22, r1
 60a:	22 1f       	adc	r18, r18
 60c:	74 9f       	mul	r23, r20
 60e:	33 27       	eor	r19, r19
 610:	a0 0d       	add	r26, r0
 612:	61 1d       	adc	r22, r1
 614:	23 1f       	adc	r18, r19
 616:	84 9f       	mul	r24, r20
 618:	60 0d       	add	r22, r0
 61a:	21 1d       	adc	r18, r1
 61c:	82 2f       	mov	r24, r18
 61e:	76 2f       	mov	r23, r22
 620:	6a 2f       	mov	r22, r26
 622:	11 24       	eor	r1, r1
 624:	9f 57       	subi	r25, 0x7F	; 127
 626:	50 40       	sbci	r21, 0x00	; 0
 628:	8a f0       	brmi	.+34     	; 0x64c <__mulsf3_pse+0x84>
 62a:	e1 f0       	breq	.+56     	; 0x664 <__mulsf3_pse+0x9c>
 62c:	88 23       	and	r24, r24
 62e:	4a f0       	brmi	.+18     	; 0x642 <__mulsf3_pse+0x7a>
 630:	ee 0f       	add	r30, r30
 632:	ff 1f       	adc	r31, r31
 634:	bb 1f       	adc	r27, r27
 636:	66 1f       	adc	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	91 50       	subi	r25, 0x01	; 1
 63e:	50 40       	sbci	r21, 0x00	; 0
 640:	a9 f7       	brne	.-22     	; 0x62c <__mulsf3_pse+0x64>
 642:	9e 3f       	cpi	r25, 0xFE	; 254
 644:	51 05       	cpc	r21, r1
 646:	70 f0       	brcs	.+28     	; 0x664 <__mulsf3_pse+0x9c>
 648:	38 c0       	rjmp	.+112    	; 0x6ba <__fp_inf>
 64a:	a6 cf       	rjmp	.-180    	; 0x598 <__fp_szero>
 64c:	5f 3f       	cpi	r21, 0xFF	; 255
 64e:	ec f3       	brlt	.-6      	; 0x64a <__mulsf3_pse+0x82>
 650:	98 3e       	cpi	r25, 0xE8	; 232
 652:	dc f3       	brlt	.-10     	; 0x64a <__mulsf3_pse+0x82>
 654:	86 95       	lsr	r24
 656:	77 95       	ror	r23
 658:	67 95       	ror	r22
 65a:	b7 95       	ror	r27
 65c:	f7 95       	ror	r31
 65e:	e7 95       	ror	r30
 660:	9f 5f       	subi	r25, 0xFF	; 255
 662:	c1 f7       	brne	.-16     	; 0x654 <__mulsf3_pse+0x8c>
 664:	fe 2b       	or	r31, r30
 666:	88 0f       	add	r24, r24
 668:	91 1d       	adc	r25, r1
 66a:	96 95       	lsr	r25
 66c:	87 95       	ror	r24
 66e:	97 f9       	bld	r25, 7
 670:	08 95       	ret

00000672 <__fp_cmp>:
 672:	99 0f       	add	r25, r25
 674:	00 08       	sbc	r0, r0
 676:	55 0f       	add	r21, r21
 678:	aa 0b       	sbc	r26, r26
 67a:	e0 e8       	ldi	r30, 0x80	; 128
 67c:	fe ef       	ldi	r31, 0xFE	; 254
 67e:	16 16       	cp	r1, r22
 680:	17 06       	cpc	r1, r23
 682:	e8 07       	cpc	r30, r24
 684:	f9 07       	cpc	r31, r25
 686:	c0 f0       	brcs	.+48     	; 0x6b8 <__fp_cmp+0x46>
 688:	12 16       	cp	r1, r18
 68a:	13 06       	cpc	r1, r19
 68c:	e4 07       	cpc	r30, r20
 68e:	f5 07       	cpc	r31, r21
 690:	98 f0       	brcs	.+38     	; 0x6b8 <__fp_cmp+0x46>
 692:	62 1b       	sub	r22, r18
 694:	73 0b       	sbc	r23, r19
 696:	84 0b       	sbc	r24, r20
 698:	95 0b       	sbc	r25, r21
 69a:	39 f4       	brne	.+14     	; 0x6aa <__fp_cmp+0x38>
 69c:	0a 26       	eor	r0, r26
 69e:	61 f0       	breq	.+24     	; 0x6b8 <__fp_cmp+0x46>
 6a0:	23 2b       	or	r18, r19
 6a2:	24 2b       	or	r18, r20
 6a4:	25 2b       	or	r18, r21
 6a6:	21 f4       	brne	.+8      	; 0x6b0 <__fp_cmp+0x3e>
 6a8:	08 95       	ret
 6aa:	0a 26       	eor	r0, r26
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <__fp_cmp+0x3e>
 6ae:	a1 40       	sbci	r26, 0x01	; 1
 6b0:	a6 95       	lsr	r26
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	81 1d       	adc	r24, r1
 6b6:	81 1d       	adc	r24, r1
 6b8:	08 95       	ret

000006ba <__fp_inf>:
 6ba:	97 f9       	bld	r25, 7
 6bc:	9f 67       	ori	r25, 0x7F	; 127
 6be:	80 e8       	ldi	r24, 0x80	; 128
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	08 95       	ret

000006c6 <__fp_nan>:
 6c6:	9f ef       	ldi	r25, 0xFF	; 255
 6c8:	80 ec       	ldi	r24, 0xC0	; 192
 6ca:	08 95       	ret

000006cc <__fp_pscA>:
 6cc:	00 24       	eor	r0, r0
 6ce:	0a 94       	dec	r0
 6d0:	16 16       	cp	r1, r22
 6d2:	17 06       	cpc	r1, r23
 6d4:	18 06       	cpc	r1, r24
 6d6:	09 06       	cpc	r0, r25
 6d8:	08 95       	ret

000006da <__fp_pscB>:
 6da:	00 24       	eor	r0, r0
 6dc:	0a 94       	dec	r0
 6de:	12 16       	cp	r1, r18
 6e0:	13 06       	cpc	r1, r19
 6e2:	14 06       	cpc	r1, r20
 6e4:	05 06       	cpc	r0, r21
 6e6:	08 95       	ret

000006e8 <__fp_round>:
 6e8:	09 2e       	mov	r0, r25
 6ea:	03 94       	inc	r0
 6ec:	00 0c       	add	r0, r0
 6ee:	11 f4       	brne	.+4      	; 0x6f4 <__fp_round+0xc>
 6f0:	88 23       	and	r24, r24
 6f2:	52 f0       	brmi	.+20     	; 0x708 <__fp_round+0x20>
 6f4:	bb 0f       	add	r27, r27
 6f6:	40 f4       	brcc	.+16     	; 0x708 <__fp_round+0x20>
 6f8:	bf 2b       	or	r27, r31
 6fa:	11 f4       	brne	.+4      	; 0x700 <__fp_round+0x18>
 6fc:	60 ff       	sbrs	r22, 0
 6fe:	04 c0       	rjmp	.+8      	; 0x708 <__fp_round+0x20>
 700:	6f 5f       	subi	r22, 0xFF	; 255
 702:	7f 4f       	sbci	r23, 0xFF	; 255
 704:	8f 4f       	sbci	r24, 0xFF	; 255
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	08 95       	ret

0000070a <__divmodhi4>:
 70a:	97 fb       	bst	r25, 7
 70c:	07 2e       	mov	r0, r23
 70e:	16 f4       	brtc	.+4      	; 0x714 <__divmodhi4+0xa>
 710:	00 94       	com	r0
 712:	07 d0       	rcall	.+14     	; 0x722 <__divmodhi4_neg1>
 714:	77 fd       	sbrc	r23, 7
 716:	09 d0       	rcall	.+18     	; 0x72a <__divmodhi4_neg2>
 718:	0e 94 99 03 	call	0x732	; 0x732 <__udivmodhi4>
 71c:	07 fc       	sbrc	r0, 7
 71e:	05 d0       	rcall	.+10     	; 0x72a <__divmodhi4_neg2>
 720:	3e f4       	brtc	.+14     	; 0x730 <__divmodhi4_exit>

00000722 <__divmodhi4_neg1>:
 722:	90 95       	com	r25
 724:	81 95       	neg	r24
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	08 95       	ret

0000072a <__divmodhi4_neg2>:
 72a:	70 95       	com	r23
 72c:	61 95       	neg	r22
 72e:	7f 4f       	sbci	r23, 0xFF	; 255

00000730 <__divmodhi4_exit>:
 730:	08 95       	ret

00000732 <__udivmodhi4>:
 732:	aa 1b       	sub	r26, r26
 734:	bb 1b       	sub	r27, r27
 736:	51 e1       	ldi	r21, 0x11	; 17
 738:	07 c0       	rjmp	.+14     	; 0x748 <__udivmodhi4_ep>

0000073a <__udivmodhi4_loop>:
 73a:	aa 1f       	adc	r26, r26
 73c:	bb 1f       	adc	r27, r27
 73e:	a6 17       	cp	r26, r22
 740:	b7 07       	cpc	r27, r23
 742:	10 f0       	brcs	.+4      	; 0x748 <__udivmodhi4_ep>
 744:	a6 1b       	sub	r26, r22
 746:	b7 0b       	sbc	r27, r23

00000748 <__udivmodhi4_ep>:
 748:	88 1f       	adc	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	5a 95       	dec	r21
 74e:	a9 f7       	brne	.-22     	; 0x73a <__udivmodhi4_loop>
 750:	80 95       	com	r24
 752:	90 95       	com	r25
 754:	bc 01       	movw	r22, r24
 756:	cd 01       	movw	r24, r26
 758:	08 95       	ret

0000075a <_exit>:
 75a:	f8 94       	cli

0000075c <__stop_program>:
 75c:	ff cf       	rjmp	.-2      	; 0x75c <__stop_program>
